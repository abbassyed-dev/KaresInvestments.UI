{
  "version": 3,
  "sources": ["src/app/admin/users/users.service.ts"],
  "sourcesContent": ["import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { User } from \"../../models/user.model\";\r\nimport { DatePipe } from \"@angular/common\";\r\n\r\n@Injectable()\r\nexport class UsersService {\r\n\r\n    constructor(private http: HttpClient, private datePipe: DatePipe) { }\r\n\r\n    getAllUsers(fetchAdmin: string) {\r\n        return this.http.get(`${environment.apiBaseUrl}/api/User/${fetchAdmin}`);\r\n    }\r\n\r\n    saveUser(user: User) {\r\n        const payload = {\r\n            ...user,\r\n            dateOfBirth: this.getFormattedDate(user.dateOfBirth),\r\n        };\r\n        return this.http.post(`${environment.apiBaseUrl}/api/User`, payload);\r\n    }\r\n\r\n    updateUser(id: string, user: User) {\r\n        const payload = {\r\n            ...user,\r\n            dateOfBirth: this.getFormattedDate(user.dateOfBirth),\r\n        };\r\n        return this.http.put(`${environment.apiBaseUrl}/api/User/${id}`, payload);\r\n    }\r\n\r\n    changePassword(payload: any) {\r\n        return this.http.post<any>(`${environment.apiBaseUrl}/api/User/changePassword`, payload);\r\n    }\r\n\r\n    getUserById(userId: string) {\r\n        return this.http.get(`${environment.apiBaseUrl}/api/User/${userId}`);\r\n    }\r\n\r\n    // Function to convert date to UTC and format it in 'yyyy-MM-dd' format\r\n    getFormattedDate(date: Date): string | null {\r\n        // Ensure the date is in UTC\r\n        const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\r\n        console.log(utcDate);\r\n        // Use DatePipe to format the UTC date\r\n        return this.datePipe.transform(utcDate, 'yyyy-MM-dd');\r\n    }\r\n\r\n    deleteUser(id: string) {\r\n        return this.http.delete(`${environment.apiBaseUrl}/api/User/${id}`);\r\n    }\r\n\r\n    getLookup() {\r\n        return this.http.get<any>(`${environment.apiBaseUrl}/api/UserPortfolio/Lookup`);\r\n    }\r\n\r\n    checkEmailExists(email: string) {\r\n        debugger;\r\n        return this.http.get<boolean>(`${environment.apiBaseUrl}/api/User/check-email?email=${email}`);\r\n    }\r\n\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;AAOM,IAAO,eAAP,MAAO,cAAY;EAErB,YAAoB,MAA0B,UAAkB;AAA5C,SAAA,OAAA;AAA0B,SAAA,WAAA;EAAsB;EAEpE,YAAY,YAAkB;AAC1B,WAAO,KAAK,KAAK,IAAI,GAAG,YAAY,UAAU,aAAa,UAAU,EAAE;EAC3E;EAEA,SAAS,MAAU;AACf,UAAM,UAAU,iCACT,OADS;MAEZ,aAAa,KAAK,iBAAiB,KAAK,WAAW;;AAEvD,WAAO,KAAK,KAAK,KAAK,GAAG,YAAY,UAAU,aAAa,OAAO;EACvE;EAEA,WAAW,IAAY,MAAU;AAC7B,UAAM,UAAU,iCACT,OADS;MAEZ,aAAa,KAAK,iBAAiB,KAAK,WAAW;;AAEvD,WAAO,KAAK,KAAK,IAAI,GAAG,YAAY,UAAU,aAAa,EAAE,IAAI,OAAO;EAC5E;EAEA,eAAe,SAAY;AACvB,WAAO,KAAK,KAAK,KAAU,GAAG,YAAY,UAAU,4BAA4B,OAAO;EAC3F;EAEA,YAAY,QAAc;AACtB,WAAO,KAAK,KAAK,IAAI,GAAG,YAAY,UAAU,aAAa,MAAM,EAAE;EACvE;;EAGA,iBAAiB,MAAU;AAEvB,UAAM,UAAU,IAAI,KAAK,KAAK,IAAI,KAAK,YAAW,GAAI,KAAK,SAAQ,GAAI,KAAK,QAAO,CAAE,CAAC;AACtF,YAAQ,IAAI,OAAO;AAEnB,WAAO,KAAK,SAAS,UAAU,SAAS,YAAY;EACxD;EAEA,WAAW,IAAU;AACjB,WAAO,KAAK,KAAK,OAAO,GAAG,YAAY,UAAU,aAAa,EAAE,EAAE;EACtE;EAEA,YAAS;AACL,WAAO,KAAK,KAAK,IAAS,GAAG,YAAY,UAAU,2BAA2B;EAClF;EAEA,iBAAiB,OAAa;AAC1B;AACA,WAAO,KAAK,KAAK,IAAa,GAAG,YAAY,UAAU,+BAA+B,KAAK,EAAE;EACjG;;;uBApDS,eAAY,mBAAA,UAAA,GAAA,mBAAA,QAAA,CAAA;IAAA;EAAA;;4EAAZ,eAAY,SAAZ,cAAY,UAAA,CAAA;EAAA;;",
  "names": []
}

{
  "version": 3,
  "sources": ["src/app/login/login.component.ts", "src/app/login/login.component.html", "src/app/login/login-routing.module.ts", "src/app/login/login.module.ts"],
  "sourcesContent": ["import { Component } from '@angular/core';\r\nimport { LayoutService } from '../layout/service/app.layout.service';\r\nimport { LoginService } from './login.service';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { AuthStateService } from '../shared/services/auth-state.service';\r\nimport { LoginResponseDto } from '../models/login-response.model';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent {\r\n  email = '';\r\n  password = '';\r\n  rememberMe: boolean = false;\r\n  constructor(\r\n    public layoutService: LayoutService,\r\n    public loginService: LoginService,\r\n    private cookieService: CookieService,\r\n    private router: Router,\r\n    private toastr: ToastrService,\r\n    private authStateService: AuthStateService\r\n  ) {}\r\n\r\n  login() {\r\n    const payload = {\r\n      email: this.email,\r\n      password: this.password,\r\n    };\r\n    this.loginService.login(payload).subscribe({\r\n      next: (response: LoginResponseDto) => {\r\n        // Set Auth Cookie\r\n        this.cookieService.set(\r\n          'Authorization',\r\n          `Bearer ${response.token}`,\r\n          undefined,\r\n          '/',\r\n          undefined,\r\n          true,\r\n          'Strict'\r\n        );\r\n        this.cookieService.set('RefreshToken', response.refreshToken);\r\n        console.log(response);\r\n        // Store Refresh Token in Local Storage\r\n        // localStorage.setItem('refreshToken', response.refreshToken);\r\n        this.authStateService.setUser(response);\r\n        if (response.isAdmin) {\r\n          this.router.navigate(['/dashboard/admin']);\r\n        } else {\r\n          this.router.navigate(['/dashboard/user']);\r\n        }\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        if (err?.message) {\r\n          this.toastr.error(err.message);\r\n        } else {\r\n          this.toastr.error('An unexpected error occurred.', 'Error');\r\n        }\r\n      },\r\n    });\r\n  }\r\n}\r\n", "<div class=\"login-container\">\r\n  <div class=\"login-wrapper\">\r\n    <div class=\"login-card-wrapper\">\r\n      <div class=\"login-card\">\r\n        <h2 class=\"card-title\">Sign In</h2>\r\n        <p class=\"welcome-text\">Welcome back! Please enter your credentials</p>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"email1\" class=\"form-label\">Email</label>\r\n          <div class=\"input-container\">\r\n            <i class=\"pi pi-envelope input-icon\"></i>\r\n            <input\r\n              id=\"email1\"\r\n              type=\"email\"\r\n              placeholder=\"Enter your email\"\r\n              pInputText\r\n              [(ngModel)]=\"email\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"password1\" class=\"form-label\">Password</label>\r\n          <div class=\"input-container\">\r\n            <i class=\"pi pi-lock input-icon\"></i>\r\n            <p-password\r\n              id=\"password1\"\r\n              [(ngModel)]=\"password\"\r\n              placeholder=\"Enter your password\"\r\n              [toggleMask]=\"true\"\r\n              styleClass=\"password-input\"\r\n              inputStyleClass=\"p-password-input\"\r\n              (keydown.enter)=\"login()\"\r\n            ></p-password>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"login-options\">\r\n          <a class=\"forgot-link\" [routerLink]=\"['/forgotpassword']\"\r\n            >Forgot password?</a\r\n          >\r\n        </div>\r\n\r\n        <button\r\n          pButton\r\n          label=\"Sign In\"\r\n          class=\"sign-in-button\"\r\n          (click)=\"login()\"\r\n        ></button>\r\n\r\n        <div class=\"sign-up-section\">\r\n          <span>Don't have an account?</span>\r\n          <a class=\"sign-up-link\" [routerLink]=\"['/register']\">Sign Up</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", "import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login.component';\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild([\r\n        { path: '', component: LoginComponent }\r\n    ])],\r\n    exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }\r\n", "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginComponent } from './login.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { PrimeNgModule } from '../shared/prime-ng.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        LoginRoutingModule,\r\n        FormsModule,\r\n        PrimeNgModule\r\n    ],\r\n    declarations: [LoginComponent],\r\n    providers: []\r\n})\r\nexport class LoginModule { }\r\n"],
  "mappings": "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",
  "names": []
}

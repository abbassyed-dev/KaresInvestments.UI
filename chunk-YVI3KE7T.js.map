{
  "version": 3,
  "sources": ["src/app/admin/users/users.component.ts", "src/app/admin/users/users.component.html", "src/app/admin/user-interests/user-interests.service.ts", "src/app/admin/user-interests/user-interests.component.ts", "src/app/admin/user-interests/user-interests.component.html", "src/app/admin/user-portfolios/user-portfolios.service.ts", "src/app/shared/user-dropdown/user-dropdown.component.ts", "src/app/shared/user-dropdown/user-dropdown.component.html", "src/app/admin/user-portfolios/user-portfolios.component.ts", "src/app/admin/user-portfolios/user-portfolios.component.html", "src/app/admin/admin-home/admin-home.component.ts", "src/app/admin/admin-home/admin-home.component.html", "src/app/admin/admin-home/admin-home.service.ts", "src/app/admin/user-transactions/user-transactions.service.ts", "src/app/admin/user-transactions/user-transactions.component.ts", "src/app/admin/user-transactions/user-transactions.component.html", "src/app/admin/admin-dashboard.component.ts", "src/app/admin/admin-dashboard.component.html", "src/app/admin/admin-dashboard-routing.module.ts", "src/app/admin/admin-dashboard.service.ts", "src/app/admin/admin-dashboard.module.ts", "src/app/admin/configuration/configuration.service.ts", "src/app/admin/configuration/configuration.component.ts", "src/app/admin/configuration/configuration.component.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\r\nimport { UsersService } from \"./users.service\";\r\nimport { User } from \"../../models/user.model\";\r\nimport { AuthStateService } from \"../../shared/services/auth-state.service\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\nimport { debounceTime, Subject, switchMap } from \"rxjs\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\n\r\n\r\n@Component({\r\n    selector: 'app-users',\r\n    templateUrl: './users.component.html',\r\n    styleUrls: ['./users.component.scss']\r\n})\r\nexport class UsersComponent implements OnInit {\r\n\r\n    users: User[];\r\n    user: User = {} as User;\r\n    userDialog = false;\r\n    submitted = false;\r\n    userNameDisabled = false;\r\n\r\n    lookupData: any;\r\n    emailExists = false;\r\n    private emailCheckSubject = new Subject<string>();\r\n\r\n    @Output() userContextFromUserTab = new EventEmitter<User>();\r\n\r\n    @Input() fetchAdmins = 'N';\r\n\r\n    constructor(private dataService: UsersService, private toastr: ToastrService,\r\n        private authStateService: AuthStateService, private confirmationService: ConfirmationService) {\r\n        this.emailCheckSubject.pipe(\r\n            debounceTime(500), // Waits 500ms after last input\r\n            switchMap(email => this.dataService.checkEmailExists(email)) // Calls the API\r\n        ).subscribe(exists => {\r\n            this.emailExists = exists;\r\n        });\r\n    }\r\n    ngOnInit(): void {\r\n        this.getLovs();\r\n        this.getAllUsers();\r\n    }\r\n\r\n    getAllUsers() {\r\n        this.dataService.getAllUsers(this.fetchAdmins).subscribe((res: any) => {\r\n            console.log(res);\r\n            this.users = res;\r\n        });\r\n    }\r\n\r\n    addUser() {\r\n        this.user = {} as User;\r\n        this.submitted = false;\r\n        this.userDialog = true;\r\n    }\r\n\r\n    hideDialog() {\r\n        this.userDialog = false;\r\n        this.submitted = false;\r\n    }\r\n\r\n    editUser(user: User) {\r\n        this.user = { ...user };\r\n        this.user.dateOfBirth = new Date(user.dateOfBirth);\r\n        this.userDialog = true;\r\n    }\r\n\r\n    saveUser(form: any) {\r\n        if (this.user.userId) {\r\n            console.log(\"********Updating User***********\", this.user);\r\n            this.user.isAdmin = this.fetchAdmins === \"Y\";\r\n            this.user.userName = this.user.email;\r\n            this.user.zipCode = this.user.zipCode.toString();\r\n            this.user.createdBy = this.authStateService.getLoggedInUserEmailId() || \"Admin\";\r\n            this.dataService.updateUser(this.user.userId, this.user).subscribe((res: any) => {\r\n                this.getAllUsers();\r\n                this.toastr.success(\"User Details Updated Successfully\");\r\n            })\r\n        } else {\r\n            this.user.isAdmin = this.fetchAdmins === \"Y\";\r\n            this.user.userName = this.user.email;\r\n            this.user.zipCode = this.user.zipCode?.toString();\r\n            this.user.createdBy = this.authStateService.getLoggedInUserEmailId() || \"Admin\";\r\n            console.log(\"********Inserting User***********\", this.user);\r\n            this.dataService.saveUser(this.user).subscribe((res: any) => {\r\n                this.getAllUsers();\r\n                this.toastr.success(\"User Details Added Successfully\");\r\n            })\r\n        }\r\n        this.userDialog = false;\r\n        this.user = {} as User;\r\n    }\r\n\r\n    viewTransactions(user: User) {\r\n        this.userContextFromUserTab.emit(user);\r\n    }\r\n\r\n    deleteUser(user: User) {\r\n        if (user.userId) {\r\n            this.dataService.deleteUser(user.userId).subscribe((res: any) => {\r\n                this.getAllUsers();\r\n                this.toastr.success(\"User Details deleted Successfully\");\r\n            },\r\n                (err) => {\r\n                    console.error('Error Deleting User', err);\r\n                });\r\n        }\r\n    }\r\n\r\n    getLovs() {\r\n        this.dataService.getLookup().subscribe((res: any) => {\r\n            console.log(res);\r\n            this.lookupData = res;\r\n        });\r\n    }\r\n\r\n    onEmailChange(event: string) {\r\n        this.emailCheckSubject.next(event); // Push new email for validation\r\n    }\r\n\r\n    showConfirmation(user: User) {\r\n        this.confirmationService.confirm({\r\n            message: \"Are you sure you want to delete this User ?\",\r\n            header: 'Delete Confirmation',\r\n            icon: 'pi pi-exclamation-triangle',\r\n            acceptButtonStyleClass: \"p-button-danger\",\r\n            rejectButtonStyleClass: \"p-button-text p-button-text\",\r\n            accept: () => {\r\n                this.deleteUser(user);\r\n            }\r\n        });\r\n    }\r\n\r\n}", "<div class=\"col-12\">\r\n  <div class=\"\">\r\n    <p-table\r\n      #usersGrid\r\n      [value]=\"users\"\r\n      [paginator]=\"true\"\r\n      [rows]=\"10\"\r\n      responsiveLayout=\"scroll\"\r\n      [globalFilterFields]=\"['firstName', 'lastName', 'email', 'phoneNo']\"\r\n    >\r\n      <ng-template pTemplate=\"caption\">\r\n        <div class=\"flex\">\r\n          <p-button\r\n            severity=\"success\"\r\n            label=\"Add User\"\r\n            icon=\"pi pi-user-plus\"\r\n            class=\"mr-2\"\r\n            (onClick)=\"addUser()\"\r\n          />\r\n          <p-iconField iconPosition=\"left\" class=\"ml-auto search-container\">\r\n            <lucide-icon\r\n              name=\"search\"\r\n              [size]=\"16\"\r\n              class=\"search-icon\"\r\n            ></lucide-icon>\r\n            <input\r\n              pInputText\r\n              type=\"text\"\r\n              #searchInput\r\n              class=\"search-input\"\r\n              (input)=\"usersGrid.filterGlobal(searchInput.value, 'contains')\"\r\n              placeholder=\"Search keyword\"\r\n            />\r\n          </p-iconField>\r\n        </div>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"header\">\r\n        <tr>\r\n          <th>First Name</th>\r\n          <th>Last Name</th>\r\n          <th>Date of Birth</th>\r\n          <th>Email</th>\r\n          <th>Phone No</th>\r\n          <th>City</th>\r\n          <th>Country</th>\r\n          <th>User Name</th>\r\n          <th>View</th>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"body\" let-user>\r\n        <tr>\r\n          <td>{{ user.firstName }}</td>\r\n          <td>{{ user.lastName }}</td>\r\n          <td>{{ user.dateOfBirth | date : \"MM/dd/yyyy\" }}</td>\r\n          <td>{{ user.email }}</td>\r\n          <td>{{ user.phoneNo | phoneFormat }}</td>\r\n          <td>{{ user.city }}</td>\r\n          <td>{{ user.country }}</td>\r\n          <td>{{ user.userName }}</td>\r\n          <td>\r\n            <p-button\r\n              icon=\"pi pi-user-edit\"\r\n              class=\"mr-2\"\r\n              [rounded]=\"true\"\r\n              [outlined]=\"true\"\r\n              severity=\"success\"\r\n              (onClick)=\"editUser(user)\"\r\n            />\r\n            <p-button\r\n              icon=\"pi pi-list-check\"\r\n              class=\"mr-2\"\r\n              [rounded]=\"true\"\r\n              [outlined]=\"true\"\r\n              *ngIf=\"fetchAdmins === 'N'\"\r\n              pTooltip=\"View Transactions\"\r\n              severity=\"success\"\r\n              (onClick)=\"viewTransactions(user)\"\r\n            />\r\n            <button\r\n              pButton\r\n              pRipple\r\n              type=\"button\"\r\n              icon=\"pi pi-trash\"\r\n              (click)=\"showConfirmation(user)\"\r\n              pTooltip=\"Delete\"\r\n              class=\"p-button-rounded p-button-text p-button-danger\"\r\n            ></button>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n    </p-table>\r\n  </div>\r\n</div>\r\n<form #userForm=\"ngForm\" (ngSubmit)=\"saveUser(userForm)\">\r\n  <p-dialog\r\n    [(visible)]=\"userDialog\"\r\n    [style]=\"{ width: '550px' }\"\r\n    header=\"Add User\"\r\n    [modal]=\"true\"\r\n    styleClass=\"p-fluid\"\r\n  >\r\n    <ng-template pTemplate=\"content\">\r\n      <div class=\"formgrid grid mb-2\">\r\n        <div class=\"field col\">\r\n          <label for=\"firstName\"\r\n            >First Name<span class=\"text-danger\">&nbsp;*</span></label\r\n          >\r\n          <input\r\n            type=\"text\"\r\n            pInputText\r\n            id=\"firstName\"\r\n            name=\"firstName\"\r\n            [(ngModel)]=\"user.firstName\"\r\n            #fName=\"ngModel\"\r\n            required\r\n          />\r\n          <div *ngIf=\"fName.invalid && fName.touched\" class=\"text-danger\">\r\n            <small>First Name is required.</small>\r\n          </div>\r\n        </div>\r\n        <div class=\"field col\">\r\n          <label for=\"lastName\"\r\n            >Last Name<span class=\"text-danger\">&nbsp;*</span></label\r\n          >\r\n          <input\r\n            type=\"text\"\r\n            pInputText\r\n            id=\"lastName\"\r\n            name=\"lastName\"\r\n            [(ngModel)]=\"user.lastName\"\r\n            #lName=\"ngModel\"\r\n            required\r\n          />\r\n          <div *ngIf=\"lName.invalid && lName.touched\" class=\"text-danger\">\r\n            <small>Last Name is required.</small>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"formgrid grid mb-2\">\r\n        <div class=\"field col\">\r\n          <label for=\"dateOfBirth\"\r\n            >Date Of Birth<span class=\"text-danger\">&nbsp;*</span></label\r\n          >\r\n          <p-calendar\r\n            id=\"dateOfBirth\"\r\n            name=\"dateOfBirth\"\r\n            [(ngModel)]=\"user.dateOfBirth\"\r\n            [showIcon]=\"true\"\r\n            [showOnFocus]=\"true\"\r\n            inputId=\"buttondisplay\"\r\n            #dateOfBirth=\"ngModel\"\r\n            dateFormat=\"mm/dd/yy\"\r\n            [showTime]=\"false\"\r\n            [dataType]=\"'date'\"\r\n          />\r\n          <!-- <div *ngIf=\"dateOfBirth.invalid && dateOfBirth.touched\" class=\"text-danger\">\r\n                        <small>Date Of Birth is required.</small>\r\n                    </div> -->\r\n        </div>\r\n        <div class=\"field col\">\r\n          <label for=\"phoneNo\"\r\n            >Mobile # <span class=\"text-danger\">&nbsp;*</span></label\r\n          >\r\n          <!-- <input type=\"text\" pInputText id=\"phoneNo\" name=\"phoneNo\" [(ngModel)]=\"user.phoneNo\" required\r\n                        #phoneNo=\"ngModel\" pattern=\"^\\d{10}$\" /> -->\r\n          <p-inputMask\r\n            id=\"phoneNo\"\r\n            mask=\"(999) 999-9999\"\r\n            name=\"phoneNo\"\r\n            [(ngModel)]=\"user.phoneNo\"\r\n            placeholder=\"(999) 999-9999\"\r\n            #phoneNo=\"ngModel\"\r\n            [unmask]=\"true\"\r\n          />\r\n          <div *ngIf=\"phoneNo.invalid && phoneNo.touched\" class=\"text-danger\">\r\n            <small>Mobile # is required and must be 10-digit number.</small>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"formgrid grid mb-2\">\r\n        <div class=\"field col\">\r\n          <label for=\"email\"\r\n            >Email <span class=\"text-danger\">&nbsp;*</span></label\r\n          >\r\n          <input\r\n            type=\"text\"\r\n            email\r\n            pInputText\r\n            id=\"email\"\r\n            name=\"email\"\r\n            [(ngModel)]=\"user.email\"\r\n            (ngModelChange)=\"onEmailChange($event)\"\r\n            #email=\"ngModel\"\r\n            required\r\n          />\r\n          <div *ngIf=\"email.invalid && email.touched\" class=\"text-danger\">\r\n            <small>Email is required & must be valid</small>\r\n          </div>\r\n          <div *ngIf=\"emailExists\" class=\"text-danger\">\r\n            <small>Email already exists</small>\r\n          </div>\r\n        </div>\r\n        <div class=\"field col\">\r\n          <label for=\"portfolio\"\r\n            >Default Portfolio <span class=\"text-danger\">&nbsp;*</span></label\r\n          >\r\n          <p-dropdown\r\n            [options]=\"lookupData.portfolios\"\r\n            name=\"portfolioId\"\r\n            [(ngModel)]=\"user.portfolioId\"\r\n            optionLabel=\"portfolioName\"\r\n            optionValue=\"portfolioId\"\r\n            placeholder=\"Select Portfolio\"\r\n            appendTo=\"body\"\r\n            required\r\n          >\r\n          </p-dropdown>\r\n        </div>\r\n      </div>\r\n      <div class=\"formgrid grid mb-2\">\r\n        <div class=\"field col\">\r\n          <label for=\"addressLine1\">Address Line 1</label>\r\n          <input\r\n            type=\"text\"\r\n            pInputText\r\n            id=\"addressLine1\"\r\n            name=\"addressLine1\"\r\n            [(ngModel)]=\"user.addressLine1\"\r\n          />\r\n        </div>\r\n        <div class=\"field col\">\r\n          <label for=\"addressLine2\">Address Line 2</label>\r\n          <input\r\n            type=\"text\"\r\n            pInputText\r\n            id=\"addressLine2\"\r\n            name=\"addressLine2\"\r\n            [(ngModel)]=\"user.addressLine2\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"formgrid grid mb-2\">\r\n        <div class=\"field col\">\r\n          <label for=\"city\">City</label>\r\n          <input\r\n            type=\"text\"\r\n            pInputText\r\n            id=\"city\"\r\n            name=\"city\"\r\n            [(ngModel)]=\"user.city\"\r\n          />\r\n        </div>\r\n        <div class=\"field col\">\r\n          <label for=\"state\">State</label>\r\n          <input\r\n            type=\"text\"\r\n            pInputText\r\n            id=\"state\"\r\n            name=\"state\"\r\n            [(ngModel)]=\"user.state\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"formgrid grid mb-2\">\r\n        <div class=\"field col\">\r\n          <label for=\"country\">Country</label>\r\n          <input\r\n            type=\"text\"\r\n            pInputText\r\n            id=\"country\"\r\n            name=\"country\"\r\n            [(ngModel)]=\"user.country\"\r\n          />\r\n        </div>\r\n        <div class=\"field col\">\r\n          <label for=\"zipCode\">Zip Code</label>\r\n          <p-inputNumber\r\n            id=\"zipCode\"\r\n            name=\"zipCode\"\r\n            [useGrouping]=\"false\"\r\n            [(ngModel)]=\"user.zipCode\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"field\">\r\n        <label for=\"remarks\">Remarks</label>\r\n        <textarea\r\n          id=\"remarks\"\r\n          name=\"remarks\"\r\n          pInputTextarea\r\n          [(ngModel)]=\"user.remarks\"\r\n          rows=\"3\"\r\n          cols=\"20\"\r\n        >\r\n        </textarea>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"footer\">\r\n      <p-button\r\n        label=\"Cancel\"\r\n        icon=\"pi pi-times\"\r\n        [text]=\"true\"\r\n        (onClick)=\"hideDialog()\"\r\n      />\r\n      <p-button\r\n        label=\"Save\"\r\n        icon=\"pi pi-check\"\r\n        [disabled]=\"userForm.invalid || emailExists\"\r\n        (onClick)=\"saveUser(userForm)\"\r\n      />\r\n    </ng-template>\r\n  </p-dialog>\r\n</form>\r\n\r\n<p-confirmDialog></p-confirmDialog>\r\n", "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { UserInterest } from \"../../models/user-interest.model\";\r\nimport { User } from \"../../models/user.model\";\r\nimport { DatePipe } from \"@angular/common\";\r\n\r\n\r\n@Injectable()\r\nexport class UserInterestService {\r\n\r\n    constructor(private http: HttpClient, private datePipe: DatePipe) { }\r\n\r\n    getAllUserInterests() {\r\n        return this.http.get(`${environment.apiBaseUrl}/api/UserInterest`);\r\n    }\r\n\r\n    updateUserInterest(id: string, user: UserInterest) {\r\n        const payload = {\r\n            ...user\r\n        };\r\n        return this.http.put(`${environment.apiBaseUrl}/api/UserInterest/${id}`, payload);\r\n    }\r\n\r\n    deleteUserInterest(id: string) {\r\n        return this.http.delete(`${environment.apiBaseUrl}/api/UserInterest/${id}`);\r\n    }\r\n\r\n    saveUser(user: User) {\r\n        const payload = {\r\n            ...user,\r\n            dateOfBirth: this.getFormattedDate(user.dateOfBirth),\r\n        };\r\n        return this.http.post(`${environment.apiBaseUrl}/api/User`, payload);\r\n    }\r\n\r\n    // Function to convert date to UTC and format it in 'yyyy-MM-dd' format\r\n    getFormattedDate(date: Date): string | null {\r\n        // Ensure the date is in UTC\r\n        const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\r\n        console.log(utcDate);\r\n        // Use DatePipe to format the UTC date\r\n        return this.datePipe.transform(utcDate, 'yyyy-MM-dd');\r\n    }\r\n}", "import { Component, OnInit } from \"@angular/core\";\r\nimport { UserInterestService } from \"./user-interests.service\";\r\nimport { UserInterest } from \"../../models/user-interest.model\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\nimport { User } from \"../../models/user.model\";\r\nimport { AuthStateService } from \"../../shared/services/auth-state.service\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\n\r\n@Component({\r\n    selector: 'app-user-interests',\r\n    templateUrl: './user-interests.component.html',\r\n    styleUrls: ['./user-interests.component.scss']\r\n})\r\nexport class UserInterestsComponent implements OnInit {\r\n\r\n    userInterests: UserInterest[];\r\n\r\n    clonedUserInterest: Record<string, UserInterest> = {};\r\n\r\n    savingUserInterest: UserInterest = {} as UserInterest;\r\n\r\n    newUser: User = {} as User;\r\n\r\n    userDialog = false;\r\n\r\n    constructor(private dataService: UserInterestService, private toastr: ToastrService,\r\n        private authStateService: AuthStateService, private confirmationService: ConfirmationService\r\n    ) {\r\n\r\n    }\r\n    ngOnInit(): void {\r\n        this.getAllUserInterests();\r\n    }\r\n\r\n    getAllUserInterests() {\r\n        this.dataService.getAllUserInterests().subscribe((res: any) => {\r\n            console.log(res);\r\n            this.userInterests = res;\r\n        });\r\n    }\r\n\r\n    onRowEditInit(userInterest: UserInterest) {\r\n        this.clonedUserInterest[userInterest.userRequestId as string] = { ...userInterest };\r\n    }\r\n\r\n    onRowEditSave(userInterest: UserInterest) {\r\n        if (userInterest.action) {\r\n            delete this.clonedUserInterest[userInterest.userRequestId as string];\r\n            console.log(userInterest);\r\n            this.dataService.updateUserInterest(userInterest.userRequestId!, userInterest).subscribe((res) => {\r\n                console.log(res);\r\n                this.toastr.success(\"User Interest updated.\")\r\n            });\r\n        }\r\n    }\r\n\r\n    onRowEditCancel(userInterest: UserInterest, index: number) {\r\n        this.userInterests[index] = this.clonedUserInterest[userInterest.userRequestId as string];\r\n        delete this.clonedUserInterest[userInterest.userRequestId as string];\r\n    }\r\n\r\n    deleteUserInterest(userInterest: UserInterest) {\r\n        if (userInterest.userRequestId) {\r\n            this.dataService.deleteUserInterest(userInterest.userRequestId).subscribe((res: any) => {\r\n                console.log(res);\r\n                this.toastr.success(\"User Interest deleted.\")\r\n                this.getAllUserInterests();\r\n                this.savingUserInterest = {} as UserInterest;\r\n            });\r\n        }\r\n    }\r\n\r\n    addNewUser(userInterest: UserInterest) {\r\n        if (userInterest) {\r\n            this.savingUserInterest = userInterest;\r\n            this.newUser.firstName = userInterest.firstName;\r\n            this.newUser.lastName = userInterest.lastName;\r\n            this.newUser.email = userInterest.email;\r\n            this.newUser.phoneNo = userInterest.mobileNum;\r\n            this.userDialog = true;\r\n        }\r\n    }\r\n\r\n    saveUser(form: any) {\r\n        this.newUser.isAdmin = false;\r\n        this.newUser.userName = this.newUser.email;\r\n        this.newUser.zipCode = this.newUser.zipCode.toString();\r\n        this.newUser.createdBy = this.authStateService.getLoggedInUserEmailId() || \"Admin\";\r\n        console.log(\"********Inserting User***********\", this.newUser);\r\n        this.dataService.saveUser(this.newUser).subscribe((res: any) => {\r\n            this.toastr.success(\"User Details Added Successfully\");\r\n            this.userDialog = false;\r\n            this.deleteUserInterest(this.savingUserInterest);\r\n        })\r\n    }\r\n\r\n    closeNewUserDialog() {\r\n        this.userDialog = false;\r\n    }\r\n\r\n    showConfirmation(userInterest: UserInterest) {\r\n        this.confirmationService.confirm({\r\n            message: \"Are you sure you want to delete this Transaction ?\",\r\n            header: 'Delete Confirmation',\r\n            icon: 'pi pi-exclamation-triangle',\r\n            acceptButtonStyleClass: \"p-button-danger\",\r\n            rejectButtonStyleClass: \"p-button-text p-button-text\",\r\n            accept: () => {\r\n                this.deleteUserInterest(userInterest);\r\n            }\r\n        });\r\n    }\r\n}", "<p-table [value]=\"userInterests\" dataKey=\"userRequestId\" editMode=\"row\">\r\n    <ng-template pTemplate=\"header\">\r\n        <tr>\r\n            <th>First Name</th>\r\n            <th>Last Name</th>\r\n            <th>Email</th>\r\n            <th>Phone No</th>\r\n            <th>Remarks</th>\r\n            <th>Req Submitted On</th>\r\n            <th>Action</th>\r\n        </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"body\" let-userInterest let-editing=\"editing\" let-ri=\"rowIndex\">\r\n        <tr [pEditableRow]=\"userInterest\">\r\n            <td>{{ userInterest.firstName }}</td>\r\n            <td>{{ userInterest.lastName }}</td>\r\n            <td>{{ userInterest.email }}</td>\r\n            <td>{{ userInterest.mobileNum }}</td>\r\n            <td>{{ userInterest.remarks }}</td>\r\n            <td>{{ userInterest.reqSubmittedOn | date: 'MM/dd/yyyy' }}</td>\r\n            <td>\r\n                <p-cellEditor>\r\n                    <ng-template pTemplate=\"input\">\r\n                        <input pInputText type=\"text\" [(ngModel)]=\"userInterest.action\" required />\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"output\">\r\n                        {{userInterest.action}}\r\n                    </ng-template>\r\n                </p-cellEditor>\r\n            </td>\r\n            <td>\r\n                <div class=\"flex align-items-center justify-content-center gap-2\">\r\n                    <button *ngIf=\"!editing\" pButton pRipple type=\"button\" pInitEditableRow icon=\"pi pi-pencil\"\r\n                        (click)=\"onRowEditInit(userInterest)\" class=\"p-button-rounded p-button-text\" pTooltip=\"Edit\">\r\n                    </button>\r\n                    <button *ngIf=\"!editing\" pButton pRipple type=\"button\" icon=\"pi pi-user-plus\"\r\n                        (click)=\"addNewUser(userInterest)\" pTooltip=\"Create User\"\r\n                        class=\"p-button-rounded p-button-text p-button-success\">\r\n                    </button>\r\n                    <button *ngIf=\"!editing\" pButton pRipple type=\"button\" icon=\"pi pi-trash\"\r\n                        (click)=\"showConfirmation(userInterest)\" pTooltip=\"Delete\"\r\n                        class=\"p-button-rounded p-button-text p-button-danger\">\r\n                    </button>\r\n                    <button *ngIf=\"editing\" pButton pRipple type=\"button\" pSaveEditableRow icon=\"pi pi-check\"\r\n                        (click)=\"onRowEditSave(userInterest)\" pTooltip=\"Save\"\r\n                        class=\"p-button-rounded p-button-text p-button-success mr-2\">\r\n                    </button>\r\n                    <button *ngIf=\"editing\" pButton pRipple type=\"button\" pCancelEditableRow icon=\"pi pi-times\"\r\n                        (click)=\"onRowEditCancel(userInterest, ri)\" pTooltip=\"Cancel\"\r\n                        class=\"p-button-rounded p-button-text p-button-danger\">\r\n                    </button>\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    </ng-template>\r\n</p-table>\r\n\r\n<form #userForm=\"ngForm\" (ngSubmit)=\"saveUser(userForm)\">\r\n    <p-dialog [(visible)]=\"userDialog\" [style]=\"{ width: '550px' }\" header=\"Add User\" [modal]=\"true\"\r\n        styleClass=\"p-fluid\">\r\n        <ng-template pTemplate=\"content\">\r\n\r\n            <div class=\"formgrid grid mb-2\">\r\n                <div class=\"field col\">\r\n                    <label for=\"firstName\">First Name</label>\r\n                    <input type=\"text\" pInputText id=\"firstName\" name=\"firstName\" [(ngModel)]=\"newUser.firstName\"\r\n                        #fName=\"ngModel\" required />\r\n                    <div *ngIf=\"fName.invalid && fName.touched\" class=\"text-danger\">\r\n                        <small>First Name is required.</small>\r\n                    </div>\r\n                </div>\r\n                <div class=\"field col\">\r\n                    <label for=\"lastName\">Last Name</label>\r\n                    <input type=\"text\" pInputText id=\"lastName\" name=\"lastName\" [(ngModel)]=\"newUser.lastName\"\r\n                        #lName=\"ngModel\" required />\r\n                    <div *ngIf=\"lName.invalid && lName.touched\" class=\"text-danger\">\r\n                        <small>Last Name is required.</small>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"formgrid grid mb-2\">\r\n                <div class=\"field col\">\r\n                    <label for=\"dateOfBirth\">Date Of Birth</label>\r\n                    <p-calendar id=\"dateOfBirth\" name=\"dateOfBirth\" [(ngModel)]=\"newUser.dateOfBirth\" [showIcon]=\"true\"\r\n                        [showOnFocus]=\"true\" inputId=\"buttondisplay\" #dateOfBirth=\"ngModel\" required\r\n                        dateFormat=\"mm/dd/yy\" [showTime]=\"false\" [dataType]=\"'date'\" />\r\n                    <div *ngIf=\"dateOfBirth.invalid && dateOfBirth.touched\" class=\"text-danger\">\r\n                        <small>Date Of Birth is required.</small>\r\n                    </div>\r\n                </div>\r\n                <div class=\"field col\">\r\n                    <label for=\"phoneNo\">Mobile #</label>\r\n                    <input type=\"text\" pInputText id=\"phoneNo\" name=\"phoneNo\" [(ngModel)]=\"newUser.phoneNo\" required\r\n                        #phoneNo=\"ngModel\" pattern=\"^\\d{10}$\" />\r\n                    <div *ngIf=\"phoneNo.invalid && phoneNo.touched\" class=\"text-danger\">\r\n                        <small>Mobile # is required and must be 10-digit number.</small>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"formgrid grid mb-2\">\r\n                <div class=\"field col\">\r\n                    <label for=\"email\">Email</label>\r\n                    <input type=\"text\" email pInputText id=\"email\" name=\"email\" [(ngModel)]=\"newUser.email\"\r\n                        #email=\"ngModel\" required />\r\n                    <div *ngIf=\"email.invalid && email.touched\" class=\"text-danger\">\r\n                        <small>Email is required & must be valid</small>\r\n                    </div>\r\n                </div>\r\n                <!-- <div class=\"field col\">\r\n                    <label for=\"userName\">Username</label>\r\n                    <input type=\"text\" pInputText name=\"userName\" [disabled]=\"true\" [(ngModel)]=\"newUser.email\" />\r\n                </div> -->\r\n            </div>\r\n            <div class=\"formgrid grid mb-2\">\r\n                <div class=\"field col\">\r\n                    <label for=\"addressLine1\">Address Line 1</label>\r\n                    <input type=\"text\" pInputText id=\"addressLine1\" name=\"addressLine1\"\r\n                        [(ngModel)]=\"newUser.addressLine1\" />\r\n                </div>\r\n                <div class=\"field col\">\r\n                    <label for=\"addressLine2\">Address Line 2</label>\r\n                    <input type=\"text\" pInputText id=\"addressLine2\" name=\"addressLine2\"\r\n                        [(ngModel)]=\"newUser.addressLine2\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"formgrid grid mb-2\">\r\n                <div class=\"field col\">\r\n                    <label for=\"city\">City</label>\r\n                    <input type=\"text\" pInputText id=\"city\" name=\"city\" [(ngModel)]=\"newUser.city\" />\r\n                </div>\r\n                <div class=\"field col\">\r\n                    <label for=\"state\">State</label>\r\n                    <input type=\"text\" pInputText id=\"state\" name=\"state\" [(ngModel)]=\"newUser.state\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"formgrid grid mb-2\">\r\n                <div class=\"field col\">\r\n                    <label for=\"country\">Country</label>\r\n                    <input type=\"text\" pInputText id=\"country\" name=\"country\" [(ngModel)]=\"newUser.country\" />\r\n                </div>\r\n                <div class=\"field col\">\r\n                    <label for=\"zipCode\">Zip Code</label>\r\n                    <p-inputNumber id=\"zipCode\" name=\"zipCode\" [useGrouping]=\"false\" [(ngModel)]=\"newUser.zipCode\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"field\">\r\n                <label for=\"remarks\">Remarks</label>\r\n                <textarea id=\"remarks\" name=\"remarks\" pInputTextarea [(ngModel)]=\"newUser.remarks\" required rows=\"3\"\r\n                    cols=\"20\">\r\n                </textarea>\r\n            </div>\r\n\r\n        </ng-template>\r\n\r\n        <ng-template pTemplate=\"footer\">\r\n            <p-button label=\"Cancel\" icon=\"pi pi-times\" [text]=\"true\" (onClick)=\"closeNewUserDialog()\" />\r\n            <p-button label=\"Save\" icon=\"pi pi-check\" [disabled]=\"userForm.invalid\" (onClick)=\"saveUser(userForm)\" />\r\n        </ng-template>\r\n\r\n    </p-dialog>\r\n</form>\r\n\r\n<p-confirmDialog></p-confirmDialog>", "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { UserInterest } from \"../../models/user-interest.model\";\r\nimport { Observable } from \"rxjs\";\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { Portfolio } from \"../../models/portfolio.model\";\r\nimport { UserPortfolio } from \"../../models/user-portfolio.model\";\r\n\r\n\r\n@Injectable()\r\nexport class UserPortfolioService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getAllUserPortfolios() {\r\n        return this.http.get(`${environment.apiBaseUrl}/api/UserPortfolio`);\r\n    }\r\n\r\n    saveUserPortfolio(userPortfolio: UserPortfolio) {\r\n        return this.http.post(`${environment.apiBaseUrl}/api/UserPortfolio`, userPortfolio);\r\n    }\r\n\r\n    updateUserPortfolio(id: number, userPortfolio: UserPortfolio) {\r\n        return this.http.put(`${environment.apiBaseUrl}/api/UserPortfolio/${id}`, userPortfolio);\r\n    }\r\n\r\n    getLookup() {\r\n        return this.http.get<any>(`${environment.apiBaseUrl}/api/UserPortfolio/Lookup`);\r\n    }\r\n}\r\n", "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '../../../environments/environment';\r\nimport { User } from '../../models/user.model';\r\n\r\n@Component({\r\n    selector: 'app-user-dropdown',\r\n    templateUrl: './user-dropdown.component.html',\r\n    styleUrls: ['./user-dropdown.component.scss']\r\n})\r\nexport class UserDropdownComponent implements OnInit {\r\n    users: any[] = []; // Holds all users fetched from the API\r\n    filteredUsers: any[] = []; // Holds the filtered list of users\r\n    searchQuery = ''; // Search query string\r\n    selectedUserObj: any = null; // Holds the selected user object\r\n    isUserDialogVisible = false;\r\n    selectedUser: any = {};\r\n    @Output() emitSelectedUser = new EventEmitter<any>();\r\n\r\n    @Input() userIdFromContext = '';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    ngOnInit(): void {\r\n        this.fetchUsers();\r\n    }\r\n\r\n    // Fetch users from the API\r\n\r\n    //'https://localhost:7109/api/User/lov' \r\n\r\n    fetchUsers() {\r\n        console.log('From dropdown', this.userIdFromContext);\r\n        const apiUrl = environment.apiBaseUrl + '/api/User/lov';\r\n        this.http.get<User[]>(apiUrl).subscribe(\r\n            (data) => {\r\n                this.users = data;\r\n                this.filteredUsers = [...this.users]; // Initialize filtered users\r\n                console.log(this.users);\r\n\r\n                if (this.userIdFromContext) {\r\n                    const userContextSearch = this.users.filter(user => user.userId === this.userIdFromContext);\r\n                    this.selectedUserObj = userContextSearch.length > 0 ? userContextSearch[0] : null;\r\n                    this.onUserSelected(null);\r\n                }\r\n            },\r\n            (error) => {\r\n                console.error('Error fetching users:', error);\r\n            }\r\n        );\r\n    }\r\n\r\n    openUserDialog() {\r\n        this.isUserDialogVisible = true;\r\n    }\r\n\r\n    filterUsers() {\r\n        const searchQuery = this.searchQuery.trim().toLowerCase();\r\n\r\n        this.filteredUsers = this.users.filter(user =>\r\n        (user.firstName?.toLowerCase().includes(searchQuery) ||\r\n            user.lastName?.toLowerCase().includes(searchQuery) ||\r\n            user.email?.toLowerCase().includes(searchQuery) ||\r\n            user.phoneNo?.includes(searchQuery))\r\n        );\r\n    }\r\n\r\n    clear() {\r\n        this.selectedUser = {};\r\n        console.log(this.selectedUser);\r\n        this.emitSelectedUser.emit(null);\r\n    }\r\n\r\n    onUserSelected(event: any) {\r\n        if (this.selectedUserObj) {\r\n            this.selectedUser = {\r\n                \"userName\": this.selectedUserObj.firstName + ', ' + this.selectedUserObj.lastName,\r\n                \"userId\": this.selectedUserObj.userId,\r\n                \"email\": this.selectedUserObj.email\r\n            };\r\n            console.log(this.selectedUser);\r\n            this.emitSelectedUser.emit(this.selectedUser);\r\n        }\r\n        this.isUserDialogVisible = false;\r\n    }\r\n}\r\n", "<div class=\"custom-dropdown\">\r\n    <input type=\"text\" id=\"selectedUser\" [(ngModel)]=\"selectedUser.userName\" readonly placeholder=\"Select a user\"\r\n        (click)=\"openUserDialog()\" />\r\n    <button pButton type=\"button\" icon=\"pi pi-search\" (click)=\"openUserDialog()\"></button>\r\n    <button pButton type=\"button\" icon=\"pi pi-times\" (click)=\"clear()\"></button>\r\n</div>\r\n\r\n<!-- User Selection Dialog -->\r\n<p-dialog [(visible)]=\"isUserDialogVisible\" header=\"Select User\" [modal]=\"true\" [style]=\"{ width: '45vw'}\"\r\n    appendTo=\"body\">\r\n    <div>\r\n        <!-- Search Input -->\r\n        <div style=\"margin-bottom: 10px;\">\r\n            <input type=\"text\" [(ngModel)]=\"searchQuery\" (input)=\"filterUsers()\" placeholder=\"Search by name\"\r\n                class=\"search-input\" />\r\n        </div>\r\n        <!-- Table -->\r\n        <div *ngIf=\"filteredUsers.length > 0; else noData\">\r\n            <p-table [value]=\"filteredUsers\" selectionMode=\"single\" [(selection)]=\"selectedUserObj\"\r\n                (onRowSelect)=\"onUserSelected($event)\" [paginator]=\"true\" [rows]=\"10\" responsiveLayout=\"scroll\">\r\n                <ng-template pTemplate=\"header\">\r\n                    <tr>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Email</th>\r\n                        <th>Phone</th>\r\n                    </tr>\r\n                </ng-template>\r\n                <ng-template pTemplate=\"body\" let-user>\r\n                    <tr [pSelectableRow]=\"user\">\r\n                        <td>{{ user.firstName }}</td>\r\n                        <td>{{ user.lastName }}</td>\r\n                        <td>{{ user.email }}</td>\r\n                        <td>{{ user.phoneNo }}</td>\r\n                    </tr>\r\n                </ng-template>\r\n            </p-table>\r\n        </div>\r\n        <ng-template #noData>\r\n            <p>No users found</p>\r\n        </ng-template>\r\n    </div>\r\n    <p-footer>\r\n        <button pButton type=\"button\" label=\"Close\" icon=\"pi pi-times\" (click)=\"isUserDialogVisible=false\"></button>\r\n    </p-footer>\r\n</p-dialog>", "import { Component, OnInit } from '@angular/core';\r\nimport { Portfolio } from '../../models/portfolio.model';\r\nimport { UserPortfolioService } from './user-portfolios.service';\r\nimport { UserPortfolio } from '../../models/user-portfolio.model';\r\nimport { AuthStateService } from '../../shared/services/auth-state.service';\r\n\r\n@Component({\r\n    selector: 'app-user-portfolios',\r\n    templateUrl: './user-portfolios.component.html',\r\n    styleUrls: ['./user-portfolios.component.scss']\r\n})\r\nexport class UserPortfoliosComponent implements OnInit {\r\n\r\n    userPortfolios: UserPortfolio[];\r\n    userPortfolio: UserPortfolio = {} as UserPortfolio;\r\n    userPortfolioDialog = false;\r\n    submitted = false;\r\n    lookupData: any;\r\n    isEditMode = false;\r\n\r\n    constructor(private dataService: UserPortfolioService,\r\n        private authStateService: AuthStateService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.getLovs();\r\n        this.getAllUserPortfolios();\r\n    }\r\n\r\n    getLovs() {\r\n        this.dataService.getLookup().subscribe((res: any) => {\r\n            console.log(res);\r\n            this.lookupData = res;\r\n        });\r\n    }\r\n\r\n    getAllUserPortfolios() {\r\n        this.dataService.getAllUserPortfolios().subscribe((res: any) => {\r\n            console.log(res);\r\n            this.userPortfolios = res;\r\n        });\r\n    }\r\n\r\n    addUserPortfolio() {\r\n        this.userPortfolio = {} as UserPortfolio;\r\n        this.submitted = false;\r\n        this.userPortfolioDialog = true;\r\n    }\r\n\r\n    hideDialog() {\r\n        this.userPortfolioDialog = false;\r\n        this.submitted = false;\r\n        this.isEditMode = false;\r\n    }\r\n\r\n    editUserPortfolio(userPortfolio: UserPortfolio) {\r\n        this.userPortfolio = { ...userPortfolio };\r\n        this.userPortfolioDialog = true;\r\n        this.isEditMode = true;\r\n    }\r\n\r\n    saveUserPortfolio(form: any) {\r\n        if (this.userPortfolio.userPortfolioId) {\r\n            console.log(\"********Updating UserPortfolio***********\", this.userPortfolio);\r\n\r\n            this.dataService.updateUserPortfolio(this.userPortfolio.userPortfolioId, this.userPortfolio).subscribe((res: any) => {\r\n                this.userPortfolio.ModifiedBy = this.authStateService.getLoggedInUserEmailId() || \"Admin\";\r\n                this.getAllUserPortfolios();\r\n            })\r\n        } else {\r\n            console.log(\"********Inserting User***********\", this.userPortfolio);\r\n            this.userPortfolio.isActive = true;\r\n            this.userPortfolio.createdBy = this.authStateService.getLoggedInUserEmailId() || \"Admin\";\r\n            this.dataService.saveUserPortfolio(this.userPortfolio).subscribe((res: any) => {\r\n                this.getAllUserPortfolios();\r\n            })\r\n        }\r\n        this.userPortfolioDialog = false;\r\n        this.userPortfolio = {} as UserPortfolio;\r\n\r\n    }\r\n\r\n    setUserDetails(evt: any) {\r\n        this.userPortfolio.userId = evt.userId;\r\n    }\r\n}", "<div class=\"col-12\">\r\n  <div class=\"\">\r\n    <!-- <p-toolbar styleClass=\"mb-4 gap-2\">\r\n            <ng-template pTemplate=\"left\">\r\n                <p-button severity=\"success\" label=\"Add User Portfolio\" icon=\"pi pi-plus\" class=\"mr-2\"\r\n                    (onClick)=\"addUserPortfolio()\" />\r\n            </ng-template>\r\n        </p-toolbar> -->\r\n    <p-table\r\n      #userPortfolioGrid\r\n      [value]=\"userPortfolios\"\r\n      [paginator]=\"true\"\r\n      [rows]=\"10\"\r\n      responsiveLayout=\"scroll\"\r\n      [globalFilterFields]=\"['userName', 'email', 'portfolioName']\"\r\n    >\r\n      <ng-template pTemplate=\"caption\">\r\n        <div class=\"flex\">\r\n          <p-button\r\n            severity=\"success\"\r\n            label=\"Add User Portfolio\"\r\n            icon=\"pi pi-plus\"\r\n            class=\"mr-2\"\r\n            (onClick)=\"addUserPortfolio()\"\r\n          />\r\n          <!-- <p-iconField iconPosition=\"left\" class=\"ml-auto\">\r\n                        <p-inputIcon>\r\n                            <i class=\"pi pi-search\"></i>\r\n                        </p-inputIcon>\r\n                        <input pInputText type=\"text\" #searchInput\r\n                            (input)=\"userPortfolioGrid.filterGlobal(searchInput.value, 'contains')\"\r\n                            placeholder=\"Search keyword\" />\r\n                    </p-iconField> -->\r\n          <!-- <p-iconField iconPosition=\"left\" class=\"ml-auto search-container\">\r\n            <lucide-icon\r\n              name=\"search\"\r\n              [size]=\"16\"\r\n              class=\"search-icon\"\r\n            ></lucide-icon>\r\n            <input\r\n              pInputText\r\n              type=\"text\"\r\n              #searchInput\r\n              (input)=\"\r\n                userPortfolioGrid.filterGlobal(searchInput.value, 'contains')\r\n              \"\r\n              placeholder=\"Search keyword\"\r\n            />\r\n          </p-iconField> -->\r\n          <p-iconField iconPosition=\"left\" class=\"ml-auto search-container\">\r\n            <lucide-icon\r\n              name=\"search\"\r\n              [size]=\"16\"\r\n              class=\"search-icon\"\r\n            ></lucide-icon>\r\n            <input\r\n              pInputText\r\n              type=\"text\"\r\n              #searchInput\r\n              class=\"search-input\"\r\n              (input)=\"\r\n                userPortfolioGrid.filterGlobal(searchInput.value, 'contains')\r\n              \"\r\n              placeholder=\"Search keyword\"\r\n            />\r\n          </p-iconField>\r\n        </div>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"header\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Email</th>\r\n          <th>Portfolio</th>\r\n          <th>Status</th>\r\n          <th>View</th>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"body\" let-userPortfolio>\r\n        <tr>\r\n          <td>{{ userPortfolio.userName }}</td>\r\n          <td>{{ userPortfolio.email }}</td>\r\n          <td>{{ userPortfolio.portfolioName }}</td>\r\n          <td>\r\n            <p-inputSwitch\r\n              id=\"isActive\"\r\n              name=\"isActive\"\r\n              [ngModel]=\"userPortfolio.isActive\"\r\n              [disabled]=\"true\"\r\n            />\r\n          </td>\r\n          <td>\r\n            <p-button\r\n              icon=\"pi pi-pencil\"\r\n              class=\"mr-2\"\r\n              [rounded]=\"true\"\r\n              [outlined]=\"true\"\r\n              severity=\"success\"\r\n              (onClick)=\"editUserPortfolio(userPortfolio)\"\r\n            />\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n    </p-table>\r\n  </div>\r\n</div>\r\n<form\r\n  #userPortfolioForm=\"ngForm\"\r\n  (ngSubmit)=\"saveUserPortfolio(userPortfolioForm)\"\r\n>\r\n  <p-dialog\r\n    [(visible)]=\"userPortfolioDialog\"\r\n    [style]=\"{ width: '30vw' }\"\r\n    header=\"Add/Edit User Portfolio\"\r\n    [modal]=\"true\"\r\n    styleClass=\"p-fluid\"\r\n  >\r\n    <ng-template pTemplate=\"content\">\r\n      <div class=\"field\">\r\n        <label for=\"user\">User</label>\r\n        <app-user-dropdown\r\n          id=\"user\"\r\n          name=\"user\"\r\n          (emitSelectedUser)=\"setUserDetails($event)\"\r\n          *ngIf=\"!isEditMode\"\r\n        ></app-user-dropdown>\r\n        <input\r\n          type=\"text\"\r\n          pInputText\r\n          id=\"user\"\r\n          name=\"user\"\r\n          [ngModel]=\"userPortfolio.userName\"\r\n          *ngIf=\"isEditMode\"\r\n          disabled\r\n        />\r\n      </div>\r\n      <div class=\"field\">\r\n        <label for=\"portfolio\">Portfolio</label>\r\n        <p-dropdown\r\n          [options]=\"lookupData.portfolios\"\r\n          name=\"portfolioId\"\r\n          [(ngModel)]=\"userPortfolio.portfolioId\"\r\n          optionLabel=\"portfolioName\"\r\n          optionValue=\"portfolioId\"\r\n          placeholder=\"Select Portfolio\"\r\n          appendTo=\"body\"\r\n        >\r\n        </p-dropdown>\r\n      </div>\r\n      <div\r\n        class=\"field\"\r\n        style=\"display: flex; align-items: center; gap: 10px\"\r\n        *ngIf=\"userPortfolio.userPortfolioId\"\r\n      >\r\n        <label for=\"isActive\" style=\"margin-right: 10px\">Status</label>\r\n        <p-inputSwitch\r\n          id=\"isActive\"\r\n          name=\"isActive\"\r\n          [(ngModel)]=\"userPortfolio.isActive\"\r\n        />\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"footer\">\r\n      <p-button\r\n        label=\"Cancel\"\r\n        icon=\"pi pi-times\"\r\n        [text]=\"true\"\r\n        (onClick)=\"hideDialog()\"\r\n      />\r\n      <p-button\r\n        label=\"Save\"\r\n        icon=\"pi pi-check\"\r\n        [disabled]=\"userPortfolioForm.invalid\"\r\n        (onClick)=\"saveUserPortfolio(userPortfolioForm)\"\r\n      />\r\n    </ng-template>\r\n  </p-dialog>\r\n</form>\r\n", "import { Component, OnInit } from '@angular/core';\r\nimport { AuthStateService } from '../../shared/services/auth-state.service';\r\nimport { AdminHomeService } from './admin-home.service';\r\nimport { DashboardStats } from '../../models/dashboard-stats.model';\r\nimport * as Highcharts from 'highcharts';\r\nimport { GraphData } from '../../models/graph-data.model';\r\nimport { mergeMap, tap } from 'rxjs';\r\nimport { UserStats } from '../../models/user-stats.model';\r\n\r\n@Component({\r\n  selector: 'app-admin-home',\r\n  templateUrl: './admin-home.component.html',\r\n  styleUrls: ['./admin-home.component.scss'],\r\n})\r\nexport class AdminHomeComponent implements OnInit {\r\n  Highcharts = Highcharts;\r\n  updateColumnChartFlag = false;\r\n  chartOptions: any;\r\n  dashboardStats: DashboardStats = {} as DashboardStats;\r\n  errorMessage: string | null = null;\r\n  transactionsGraphData: GraphData[] = [];\r\n  usersGraphData: GraphData[] = [];\r\n  userStats = {} as UserStats;\r\n\r\n  constructor(\r\n    private authStateService: AuthStateService,\r\n    private dataService: AdminHomeService\r\n  ) {}\r\n\r\n  userName = `${this.authStateService.getLoggedInUserProperty(\r\n    'lastName'\r\n  )} ${this.authStateService.getLoggedInUserProperty('firstName')}`;\r\n\r\n  ngOnInit() {\r\n    this.loadDashboardDataSequentially();\r\n\r\n    this.chartOptions = {\r\n      chart: {\r\n        type: 'column',\r\n        style: {\r\n          fontFamily: 'inherit',\r\n        },\r\n        spacing: [10, 10, 15, 10],\r\n      },\r\n      title: {\r\n        text: null,\r\n      },\r\n      xAxis: {\r\n        categories: ['Jan', 'Feb', 'Mar'],\r\n        lineColor: 'var(--border-color)',\r\n        tickColor: 'var(--border-color)',\r\n      },\r\n      yAxis: {\r\n        min: 0,\r\n        title: {\r\n          text: null,\r\n        },\r\n        gridLineColor: 'var(--border-color)',\r\n        gridLineDashStyle: 'Dash',\r\n      },\r\n      legend: {\r\n        enabled: false,\r\n      },\r\n      credits: {\r\n        enabled: false,\r\n      },\r\n      tooltip: {\r\n        headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\r\n        pointFormat:\r\n          '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\r\n          '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\r\n        footerFormat: '</table>',\r\n        shared: true,\r\n        useHTML: true,\r\n        backgroundColor: 'var(--surface-overlay)',\r\n        borderColor: 'var(--border-color)',\r\n        borderRadius: 8,\r\n        style: {\r\n          color: 'var(--text-color)',\r\n        },\r\n      },\r\n      plotOptions: {\r\n        column: {\r\n          pointPadding: 0.2,\r\n          borderWidth: 0,\r\n          borderRadius: 4,\r\n        },\r\n        series: {\r\n          color: 'var(--primary-color)',\r\n        },\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Transactions',\r\n          type: 'column',\r\n          data: [5, 10, 15],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  loadDashboardDataSequentially(): void {\r\n    this.dataService\r\n      .getAdminDashboardStats()\r\n      .pipe(\r\n        tap((data) => this.handleDashboardStats(data)),\r\n        mergeMap(() =>\r\n          this.dataService\r\n            .getAdminDashboardGraphData()\r\n            .pipe(tap((data) => this.handleGraphData(data)))\r\n        ),\r\n        mergeMap(() =>\r\n          this.dataService\r\n            .getOverAllInvestmentStats(null)\r\n            .pipe(tap((data) => this.showOverAllInvestmentStats(data)))\r\n        )\r\n      )\r\n      .subscribe({\r\n        next: () => console.log('All dashboard data loaded successfully'),\r\n        error: (error) => {\r\n          console.error('Error during dashboard data loading:', error);\r\n        },\r\n      });\r\n  }\r\n\r\n  handleDashboardStats(data: any) {\r\n    this.dashboardStats = data;\r\n    this.errorMessage = null;\r\n  }\r\n\r\n  handleGraphData(data: any) {\r\n    const categories = data.transactionsGraphData.map(\r\n      (item: any) => item.xAxis\r\n    );\r\n    const transactionsData = data.transactionsGraphData.map(\r\n      (item: any) => item.yAxisValue\r\n    );\r\n\r\n    this.chartOptions.xAxis.categories = categories;\r\n    this.chartOptions.series[0].data = transactionsData;\r\n    this.updateColumnChartFlag = true;\r\n  }\r\n\r\n  showOverAllInvestmentStats(data: any) {\r\n    if (data) this.userStats = data;\r\n  }\r\n\r\n  // Helper method to calculate progress bar width\r\n  getProgressWidth(part: number, total: number): number {\r\n    if (!part || !total) return 0;\r\n    const percentage = (part / total) * 100;\r\n    return Math.min(percentage, 100); // Cap at 100%\r\n  }\r\n}\r\n", "<div class=\"dashboard-content\">\r\n  <!-- Welcome Section -->\r\n  <div class=\"welcome-section\">\r\n    <h1 class=\"welcome-title\">Welcome to your Dashboard</h1>\r\n    <p class=\"welcome-subtitle\">\r\n      Here's what's happening with your investments today\r\n    </p>\r\n  </div>\r\n\r\n  <!-- Stats Cards -->\r\n  <div class=\"stats-grid\">\r\n    <div class=\"stat-card\">\r\n      <div class=\"stat-card-content\">\r\n        <div class=\"stat-info\">\r\n          <span class=\"stat-label\">Users</span>\r\n          <div class=\"stat-value\">\r\n            {{ dashboardStats.activeUsers | number }}\r\n          </div>\r\n          <div class=\"stat-trend positive\">\r\n            <i class=\"pi pi-arrow-up\"></i>\r\n            <span>{{ dashboardStats.usersJoinedThisMonth }} new</span>\r\n            <span class=\"trend-period\">since this month</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"stat-icon users-icon\">\r\n          <i class=\"pi pi-users\"></i>\r\n        </div>\r\n      </div>\r\n      <div\r\n        class=\"stat-progress\"\r\n        [style.width.%]=\"\r\n          getProgressWidth(\r\n            dashboardStats.usersJoinedThisMonth,\r\n            dashboardStats.activeUsers\r\n          )\r\n        \"\r\n      ></div>\r\n    </div>\r\n\r\n    <div class=\"stat-card\">\r\n      <div class=\"stat-card-content\">\r\n        <div class=\"stat-info\">\r\n          <span class=\"stat-label\">Investment Amount</span>\r\n          <div class=\"stat-value\">\r\n            {{ dashboardStats.totalInvestedAmount | currencyFormat }}\r\n          </div>\r\n          <div class=\"stat-trend positive\">\r\n            <i class=\"pi pi-arrow-up\"></i>\r\n            <span>{{\r\n              dashboardStats.totalInvestedAmountThisMonth | currencyFormat\r\n            }}</span>\r\n            <span class=\"trend-period\">since this month</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"stat-icon investment-icon\">\r\n          <i class=\"pi pi-dollar\"></i>\r\n        </div>\r\n      </div>\r\n      <div\r\n        class=\"stat-progress\"\r\n        [style.width.%]=\"\r\n          getProgressWidth(\r\n            dashboardStats.totalInvestedAmountThisMonth,\r\n            dashboardStats.totalInvestedAmount\r\n          )\r\n        \"\r\n      ></div>\r\n    </div>\r\n\r\n    <div class=\"stat-card\">\r\n      <div class=\"stat-card-content\">\r\n        <div class=\"stat-info\">\r\n          <span class=\"stat-label\">User Transactions</span>\r\n          <div class=\"stat-value\">\r\n            {{ dashboardStats.totalTransactions | number }}\r\n          </div>\r\n          <div class=\"stat-trend positive\">\r\n            <i class=\"pi pi-arrow-up\"></i>\r\n            <span>{{ dashboardStats.transactionsThisMonth }} new</span>\r\n            <span class=\"trend-period\">since this month</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"stat-icon transactions-icon\">\r\n          <i class=\"pi pi-list\"></i>\r\n        </div>\r\n      </div>\r\n      <div\r\n        class=\"stat-progress\"\r\n        [style.width.%]=\"\r\n          getProgressWidth(\r\n            dashboardStats.transactionsThisMonth,\r\n            dashboardStats.totalTransactions\r\n          )\r\n        \"\r\n      ></div>\r\n    </div>\r\n\r\n    <div class=\"stat-card\">\r\n      <div class=\"stat-card-content\">\r\n        <div class=\"stat-info\">\r\n          <span class=\"stat-label\">User Interests</span>\r\n          <div class=\"stat-value\">\r\n            {{ dashboardStats.totalInterests | number }}\r\n          </div>\r\n          <div\r\n            class=\"stat-trend\"\r\n            [ngClass]=\"\r\n              dashboardStats.pendingInterests > 0 ? 'neutral' : 'positive'\r\n            \"\r\n          >\r\n            <i\r\n              class=\"pi pi-clock\"\r\n              *ngIf=\"dashboardStats.pendingInterests > 0\"\r\n            ></i>\r\n            <i\r\n              class=\"pi pi-check\"\r\n              *ngIf=\"dashboardStats.pendingInterests === 0\"\r\n            ></i>\r\n            <span>{{ dashboardStats.pendingInterests }}</span>\r\n            <span class=\"trend-period\">pending</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"stat-icon interests-icon\">\r\n          <i class=\"pi pi-comment\"></i>\r\n        </div>\r\n      </div>\r\n      <div\r\n        class=\"stat-progress\"\r\n        [style.width.%]=\"\r\n          getProgressWidth(\r\n            dashboardStats.pendingInterests,\r\n            dashboardStats.totalInterests\r\n          )\r\n        \"\r\n      ></div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Charts Section -->\r\n  <div class=\"charts-section\">\r\n    <div class=\"chart-card investment-summary\">\r\n      <div class=\"chart-card-header\">\r\n        <h2 class=\"chart-title\">Investment Summary</h2>\r\n        <div class=\"chart-actions\">\r\n          <button class=\"chart-action-btn\">\r\n            <i class=\"pi pi-refresh\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"investment-stats\">\r\n        <div class=\"stat-row\">\r\n          <div class=\"stat-label\">Total Investment</div>\r\n          <div class=\"stat-value highlight\">\r\n            {{ userStats.totalInvestment || 0 | currencyFormat }}\r\n          </div>\r\n        </div>\r\n        <div class=\"stat-row\">\r\n          <div class=\"stat-label\">No of Dividends Paid</div>\r\n          <div class=\"stat-value\">\r\n            {{ userStats.numberOfDividendsPaid || 0 }}\r\n          </div>\r\n        </div>\r\n        <div class=\"stat-row\">\r\n          <div class=\"stat-label\">Dividends Total</div>\r\n          <div class=\"stat-value dividend\">\r\n            {{ userStats.totalDividendsPaid || 0 | currency }}\r\n          </div>\r\n        </div>\r\n        <div class=\"stat-row\">\r\n          <div class=\"stat-label\">Return on Investment</div>\r\n          <div\r\n            class=\"stat-value\"\r\n            [ngClass]=\"\r\n              userStats.returnOnInvestment > 0 ? 'positive' : 'negative'\r\n            \"\r\n          >\r\n            {{ userStats.returnOnInvestment }}%\r\n          </div>\r\n        </div>\r\n        <div class=\"stat-row\">\r\n          <div class=\"stat-label\">Return of Capital</div>\r\n          <div\r\n            class=\"stat-value\"\r\n            [ngClass]=\"userStats.returnOfCapital > 0 ? 'positive' : 'negative'\"\r\n          >\r\n            {{ userStats.returnOfCapital }}%\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"chart-card transactions-chart\">\r\n      <div class=\"chart-card-header\">\r\n        <h2 class=\"chart-title\">Transactions Trend</h2>\r\n        <div class=\"chart-actions\">\r\n          <button class=\"chart-action-btn\">\r\n            <i class=\"pi pi-calendar\"></i>\r\n          </button>\r\n          <button class=\"chart-action-btn\">\r\n            <i class=\"pi pi-download\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"chart-container\">\r\n        <highcharts-chart\r\n          [Highcharts]=\"Highcharts\"\r\n          [options]=\"chartOptions\"\r\n          style=\"width: 100%; height: 300px; display: block\"\r\n          [(update)]=\"updateColumnChartFlag\"\r\n        >\r\n        </highcharts-chart>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { Observable } from \"rxjs\";\r\nimport { DashboardStats } from \"../../models/dashboard-stats.model\";\r\nimport { UserStats } from \"../../models/user-stats.model\";\r\n\r\n@Injectable()\r\nexport class AdminHomeService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getAdminDashboardStats(): Observable<DashboardStats> {\r\n        return this.http.get<DashboardStats>(`${environment.apiBaseUrl}/api/AdminDashboard/dashboard-stats`);\r\n    }\r\n\r\n    getAdminDashboardGraphData() {\r\n        return this.http.get<DashboardStats>(`${environment.apiBaseUrl}/api/AdminDashboard/user-transactions-graph`);\r\n    }\r\n\r\n    getAdminDashboardPieChartData() {\r\n        return this.http.get<DashboardStats>(`${environment.apiBaseUrl}/api/AdminDashboard/inv-port-dist`);\r\n    }\r\n\r\n    getOverAllInvestmentStats(userId: string | null = null) {\r\n        // return this.http.get<UserStats>(`${environment.apiBaseUrl}/api/User/user-stats?userId=${userId}`);\r\n        return this.http.get<UserStats>(`${environment.apiBaseUrl}/api/User/user-stats`, {\r\n            params: userId ? { userId } : {}  // If userId is null, send an empty params object\r\n        });\r\n    }\r\n}", "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { UserTransaction } from \"../../models/user-transaction.model\";\r\nimport { DatePipe } from \"@angular/common\";\r\n\r\n\r\n@Injectable()\r\nexport class UserTransactionsService {\r\n\r\n    constructor(private http: HttpClient, private datePipe: DatePipe) { }\r\n\r\n    getAllTransactions() {\r\n        return this.http.get(`${environment.apiBaseUrl}/api/UserTransaction`);\r\n    }\r\n\r\n    saveTransaction(userTransaction: UserTransaction) {\r\n        const payload = {\r\n            ...userTransaction,\r\n            transactionDate: this.getFormattedDate(userTransaction.transactionDate),\r\n        };\r\n        return this.http.post(`${environment.apiBaseUrl}/api/UserTransaction`, payload);\r\n    }\r\n\r\n    updateTransaction(id: string, userTransaction: UserTransaction) {\r\n        const payload = {\r\n            ...userTransaction,\r\n            transactionDate: this.getFormattedDate(userTransaction.transactionDate),\r\n        };\r\n        return this.http.put(`${environment.apiBaseUrl}/api/UserTransaction/${id}`, payload);\r\n    }\r\n\r\n    getLookup() {\r\n        return this.http.get<any>(`${environment.apiBaseUrl}/api/UserTransaction/Lookup`);\r\n    }\r\n\r\n    getUserPortfolios(userId: string) {\r\n        return this.http.get(`${environment.apiBaseUrl}/api/UserPortfolio/${userId}`);\r\n    }\r\n\r\n    getAllTransactionsByUser(userId: string, selectedPortfolio: number) {\r\n        return this.http.get(`${environment.apiBaseUrl}/api/UserTransaction/${userId}/${selectedPortfolio}`);\r\n    }\r\n\r\n    deleteTransaction(id: string) {\r\n        return this.http.delete(`${environment.apiBaseUrl}/api/UserTransaction/${id}`);\r\n    }\r\n\r\n    getFormattedDate(date: Date): string | null {\r\n        // Ensure the date is in UTC\r\n        const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\r\n        console.log(utcDate);\r\n        // Use DatePipe to format the UTC date\r\n        return this.datePipe.transform(utcDate, 'yyyy-MM-dd');\r\n    }\r\n}\r\n", "import { Component, OnInit, Input } from '@angular/core';\r\nimport { AuthStateService } from '../../shared/services/auth-state.service';\r\nimport { UserTransactionsService } from './user-transactions.service';\r\nimport { UserTransaction } from '../../models/user-transaction.model';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { User } from '../../models/user.model';\r\nimport { ConfirmationService } from 'primeng/api';\r\n\r\n@Component({\r\n    selector: 'app-user-transactions',\r\n    templateUrl: './user-transactions.component.html',\r\n    styleUrl: './user-transactions.component.scss'\r\n})\r\nexport class UserTransactionsComponent implements OnInit {\r\n\r\n    userTransactions: UserTransaction[];\r\n    userTransaction: UserTransaction = {} as UserTransaction;\r\n    userTransactionDialog = false;\r\n    submitted = false;\r\n    lookupData: any;\r\n    isEditMode = false;\r\n\r\n    @Input() userFromContext: User = {} as User;\r\n\r\n    userPortfolios: any[] = [];\r\n    filteredCategories: any[] = [];\r\n\r\n    selectedPortfolio = 0; // Holds the selected value\r\n\r\n    constructor(private authStateService: AuthStateService, private toastr: ToastrService,\r\n        private confirmationService: ConfirmationService,\r\n        private dataService: UserTransactionsService) { }\r\n\r\n\r\n    ngOnInit(): void {\r\n        console.log('From T:', this.userFromContext.firstName, this.userFromContext.userId);\r\n        this.getLovs();\r\n        if (!this.userFromContext.userId) {\r\n            this.getAllTransactions();\r\n        } else {\r\n            this.getAllTransactionByUser();\r\n        }\r\n    }\r\n\r\n    getLovs() {\r\n        this.dataService.getLookup().subscribe((res: any) => {\r\n            console.log(res);\r\n            this.lookupData = res;\r\n        });\r\n    }\r\n\r\n    filterCategories() {\r\n        if (!this.userTransaction.transactionTypeId) {\r\n            this.filteredCategories = [];\r\n            return;\r\n        }\r\n\r\n        this.filteredCategories = this.lookupData.transactionCategories.filter(\r\n            (cat: any) => cat.transactionTypeId === this.userTransaction.transactionTypeId\r\n        );\r\n\r\n        // Reset selected category if it's not in the filtered list\r\n        // if (!this.filteredCategories.some(cat => cat.transactionCatgId === this.userTransaction.transactionCategoryId)) {\r\n        //     this.userTransaction.transactionCategoryId = null;\r\n        // }\r\n    }\r\n\r\n    setUserDetails(evt: any) {\r\n        if (evt) {\r\n            this.userTransaction.userId = evt.userId;\r\n            this.userFromContext.userId = evt.userId;\r\n            this.userTransaction.email = evt.email;\r\n            this.fetchUserPortfolios(this.userTransaction.userId, false);\r\n            this.getAllTransactionByUser();\r\n        } else {\r\n            this.getAllTransactions();\r\n            this.userFromContext = {} as User;\r\n        }\r\n    }\r\n\r\n    fetchUserPortfolios(userId: string, editMode: boolean) {\r\n        if (userId) {\r\n            this.dataService.getUserPortfolios(userId).subscribe((res: any) => {\r\n                console.log(res.portfolios);\r\n                this.userPortfolios = res.portfolios;\r\n                this.lookupData[\"userPortfolios\"] = res.portfolios;\r\n                //this.cdr.detectChanges();\r\n                //console.log('rb', this.userPortfolios);\r\n                if (editMode) {\r\n                    this.userTransactionDialog = true;\r\n                    this.isEditMode = true;\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    fetchUserTransactions(portfolioId: number) {\r\n        this.getAllTransactionByUser();\r\n    }\r\n\r\n    getAllTransactions() {\r\n        this.dataService.getAllTransactions().subscribe((res: any) => {\r\n            console.log(res);\r\n            this.userTransactions = res;\r\n        });\r\n    }\r\n\r\n    addTransaction() {\r\n        this.userTransaction = {} as UserTransaction;\r\n        if (this.userFromContext.userId) {\r\n            this.userTransaction.userId = this.userFromContext.userId;\r\n        }\r\n        this.submitted = false;\r\n        this.userTransactionDialog = true;\r\n    }\r\n\r\n    hideDialog() {\r\n        this.userTransactionDialog = false;\r\n        this.submitted = false;\r\n        this.isEditMode = false;\r\n    }\r\n\r\n    editTransaction(userTransaction: UserTransaction) {\r\n        this.userTransaction = { ...userTransaction };\r\n        this.userTransaction.transactionDate = new Date(userTransaction.transactionDate);\r\n        if (this.userTransaction.userId) {\r\n            this.fetchUserPortfolios(this.userTransaction.userId, true);\r\n        }\r\n        // this.userTransactionDialog = true;\r\n        // this.isEditMode = true;\r\n    }\r\n\r\n    saveTransaction(form: any) {\r\n        if (this.userTransaction.userTransactionId) {\r\n            console.log(\"********Updating User Transaction***********\", this.userTransaction);\r\n\r\n            this.dataService.updateTransaction(this.userTransaction.userTransactionId, this.userTransaction).subscribe((res: any) => {\r\n                this.userTransaction.ModifiedBy = this.authStateService.getLoggedInUserEmailId() || \"Admin\";\r\n                this.getAllTransactions();\r\n            })\r\n        } else {\r\n            console.log(\"********Inserting User***********\", this.userTransaction);\r\n            this.userTransaction.createdBy = this.authStateService.getLoggedInUserEmailId() || \"Admin\";\r\n            this.dataService.saveTransaction(this.userTransaction).subscribe((res: any) => {\r\n                // this.getAllTransactions();\r\n                if (!this.userFromContext.userId) {\r\n                    this.getAllTransactions();\r\n                } else {\r\n                    this.getAllTransactionByUser();\r\n                }\r\n            })\r\n        }\r\n        this.userTransactionDialog = false;\r\n        this.userTransaction = {} as UserTransaction;\r\n    }\r\n\r\n    getAllTransactionByUser() {\r\n        if (this.userFromContext.userId) {\r\n            console.log(this.userFromContext.userId);\r\n            this.dataService.getAllTransactionsByUser(this.userFromContext.userId, this.selectedPortfolio).subscribe((res: any) => {\r\n                console.log(res);\r\n                this.userTransactions = res;\r\n            });\r\n        }\r\n    }\r\n\r\n    deleteTransaction(transaction: UserTransaction) {\r\n        if (transaction.userTransactionId) {\r\n            this.dataService.deleteTransaction(transaction.userTransactionId).subscribe((res: any) => {\r\n                if (!this.userFromContext.userId) {\r\n                    this.getAllTransactions();\r\n                } else {\r\n                    this.getAllTransactionByUser();\r\n                }\r\n                this.toastr.success(\"User Details deleted Successfully\");\r\n            },\r\n                (err) => {\r\n                    console.error('Error Deleting User', err);\r\n                    this.toastr.error(\"Not able to Delete. Try Again\");\r\n                });\r\n        }\r\n    }\r\n\r\n    showConfirmation(userTransaction: UserTransaction) {\r\n        this.confirmationService.confirm({\r\n            message: \"Are you sure you want to delete this Transaction ?\",\r\n            header: 'Delete Confirmation',\r\n            icon: 'pi pi-exclamation-triangle',\r\n            acceptButtonStyleClass: \"p-button-danger\",\r\n            rejectButtonStyleClass: \"p-button-text p-button-text\",\r\n            accept: () => {\r\n                this.deleteTransaction(userTransaction);\r\n            }\r\n        });\r\n    }\r\n}", "<div class=\"row\">\r\n  <div class=\"col-3\">\r\n    <div class=\"input-group\">\r\n      <!-- <label class=\"input-label\" for=\"userContext\">User:</label> -->\r\n      <app-user-dropdown\r\n        id=\"userContext\"\r\n        name=\"userContext\"\r\n        [userIdFromContext]=\"userFromContext.userId\"\r\n        (emitSelectedUser)=\"setUserDetails($event)\"\r\n      ></app-user-dropdown>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-9\" *ngIf=\"userFromContext.userId\">\r\n    <div class=\"radio-button-group\">\r\n      <label class=\"group-label\">Portfolios:</label>\r\n      <div class=\"radio-button-list\">\r\n        <p-radioButton\r\n          name=\"category\"\r\n          [value]=\"0\"\r\n          [(ngModel)]=\"selectedPortfolio\"\r\n          [label]=\"'ALL'\"\r\n          (onClick)=\"fetchUserTransactions(0)\"\r\n        >\r\n        </p-radioButton>\r\n        <p-radioButton\r\n          *ngFor=\"let portfolio of userPortfolios\"\r\n          name=\"category\"\r\n          [value]=\"portfolio.portfolioId\"\r\n          [(ngModel)]=\"selectedPortfolio\"\r\n          [label]=\"portfolio.portfolioName\"\r\n          (onClick)=\"fetchUserTransactions(portfolio.portfolioId)\"\r\n        >\r\n        </p-radioButton>\r\n      </div>\r\n    </div>\r\n    <!-- <div class=\"radio-button-list\">\r\n            <p-radioButton *ngFor=\"let category of categories\" name=\"category\" [value]=\"category.key\"\r\n                [(ngModel)]=\"selectedCategory\" [label]=\"category.name\">\r\n            </p-radioButton>\r\n        </div> -->\r\n  </div>\r\n</div>\r\n<div class=\"col-12\">\r\n  <div class=\"\">\r\n    <p-table\r\n      #userTransactionsGrid\r\n      [value]=\"userTransactions\"\r\n      [paginator]=\"true\"\r\n      [rows]=\"10\"\r\n      responsiveLayout=\"scroll\"\r\n      [globalFilterFields]=\"['userName', 'email']\"\r\n    >\r\n      <ng-template pTemplate=\"caption\">\r\n        <div class=\"flex\">\r\n          <p-button\r\n            severity=\"success\"\r\n            label=\"New Transaction\"\r\n            icon=\"pi pi-plus\"\r\n            class=\"mr-2\"\r\n            (onClick)=\"addTransaction()\"\r\n          />\r\n          <!-- <p-iconField iconPosition=\"left\" class=\"ml-auto\">\r\n                        <p-inputIcon>\r\n                            <i class=\"pi pi-search\"></i>\r\n                        </p-inputIcon>\r\n                        <input pInputText type=\"text\" #searchInput\r\n                            (input)=\"userTransactionsGrid.filterGlobal(searchInput.value, 'contains')\"\r\n                            placeholder=\"Search keyword\" />\r\n                    </p-iconField> -->\r\n          <p-iconField iconPosition=\"left\" class=\"ml-auto search-container\">\r\n            <lucide-icon\r\n              name=\"search\"\r\n              [size]=\"16\"\r\n              class=\"search-icon\"\r\n            ></lucide-icon>\r\n            <input\r\n              pInputText\r\n              type=\"text\"\r\n              #searchInput\r\n              class=\"search-input\"\r\n              (input)=\"\r\n                userTransactionsGrid.filterGlobal(searchInput.value, 'contains')\r\n              \"\r\n              placeholder=\"Search keyword\"\r\n            />\r\n          </p-iconField>\r\n        </div>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"header\">\r\n        <tr>\r\n          <th>User Name</th>\r\n          <th>Email</th>\r\n          <th>Amount</th>\r\n          <th>Portfolio</th>\r\n          <th>Transaction Date</th>\r\n          <th>Transaction Type</th>\r\n          <th>Transaction Category</th>\r\n          <th>Payment Mode</th>\r\n          <th>Action</th>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"body\" let-transaction>\r\n        <tr>\r\n          <td>{{ transaction.userName }}</td>\r\n          <td>{{ transaction.email }}</td>\r\n          <td>{{ transaction.amount | currencyFormat }}</td>\r\n          <td>{{ transaction.portfolioName }}</td>\r\n          <td>{{ transaction.transactionDate | date : \"MM/dd/yyyy\" }}</td>\r\n          <td>{{ transaction.transactionType }}</td>\r\n          <td>{{ transaction.transactionCategory }}</td>\r\n          <td>{{ transaction.paymentMode }}</td>\r\n          <td>\r\n            <p-button\r\n              icon=\"pi pi-pencil\"\r\n              class=\"mr-2\"\r\n              [rounded]=\"true\"\r\n              [outlined]=\"true\"\r\n              severity=\"success\"\r\n              (onClick)=\"editTransaction(transaction)\"\r\n            />\r\n            <button\r\n              pButton\r\n              pRipple\r\n              type=\"button\"\r\n              icon=\"pi pi-trash\"\r\n              (click)=\"showConfirmation(transaction)\"\r\n              pTooltip=\"Delete\"\r\n              class=\"p-button-rounded p-button-text p-button-danger\"\r\n            ></button>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n    </p-table>\r\n  </div>\r\n</div>\r\n\r\n<form #transactionForm=\"ngForm\" (ngSubmit)=\"saveTransaction(transactionForm)\">\r\n  <p-dialog\r\n    [(visible)]=\"userTransactionDialog\"\r\n    [style]=\"{ width: '40vw' }\"\r\n    header=\"Add/Edit User Transaction\"\r\n    [modal]=\"true\"\r\n    styleClass=\"p-fluid\"\r\n    [focusOnShow]=\"false\"\r\n  >\r\n    <ng-template pTemplate=\"content\">\r\n      <div class=\"formgrid grid mb-2\">\r\n        <div class=\"field col\">\r\n          <label for=\"user\">User</label>\r\n          <app-user-dropdown\r\n            id=\"user\"\r\n            name=\"user\"\r\n            (emitSelectedUser)=\"setUserDetails($event)\"\r\n            *ngIf=\"!isEditMode\"\r\n            [userIdFromContext]=\"userFromContext.userId\"\r\n          ></app-user-dropdown>\r\n          <input\r\n            type=\"text\"\r\n            pInputText\r\n            id=\"user\"\r\n            name=\"user\"\r\n            [ngModel]=\"userTransaction.userName\"\r\n            *ngIf=\"isEditMode\"\r\n            disabled\r\n            class=\"input\"\r\n          />\r\n        </div>\r\n        <div class=\"field col\">\r\n          <label for=\"transactionDate\"\r\n            >Transaction Date<span class=\"text-danger\">&nbsp;*</span></label\r\n          >\r\n          <p-calendar\r\n            id=\"transactionDate\"\r\n            name=\"transactionDate\"\r\n            [(ngModel)]=\"userTransaction.transactionDate\"\r\n            [showIcon]=\"true\"\r\n            [showOnFocus]=\"true\"\r\n            inputId=\"buttondisplay\"\r\n            #dateOfBirth=\"ngModel\"\r\n            dateFormat=\"mm/dd/yy\"\r\n            [showTime]=\"false\"\r\n            [dataType]=\"'date'\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"formgrid grid mb-2\">\r\n        <div class=\"field col\">\r\n          <label for=\"transactionTypeId\">Transaction Type</label>\r\n          <p-dropdown\r\n            [options]=\"lookupData.transactionTypes\"\r\n            name=\"transactionTypeId\"\r\n            [(ngModel)]=\"userTransaction.transactionTypeId\"\r\n            optionLabel=\"transactionTypeName\"\r\n            optionValue=\"transactionTypeId\"\r\n            placeholder=\"Select Transaction Type\"\r\n            appendTo=\"body\"\r\n            [showClear]=\"true\"\r\n            (onChange)=\"filterCategories()\"\r\n          >\r\n          </p-dropdown>\r\n        </div>\r\n        <div class=\"field col\">\r\n          <label for=\"transactionCategoryId\">Transaction Category</label>\r\n          <p-dropdown\r\n            [options]=\"filteredCategories\"\r\n            name=\"transactionCategoryId\"\r\n            [(ngModel)]=\"userTransaction.transactionCategoryId\"\r\n            optionLabel=\"transactionCatgName\"\r\n            optionValue=\"transactionCatgId\"\r\n            placeholder=\"Select Category\"\r\n            appendTo=\"body\"\r\n          >\r\n          </p-dropdown>\r\n        </div>\r\n      </div>\r\n      <div class=\"formgrid grid mb-2\">\r\n        <div class=\"field col\">\r\n          <label for=\"userPortfolioId\">User Portfolios</label>\r\n          <p-dropdown\r\n            [options]=\"lookupData.userPortfolios\"\r\n            name=\"userPortfolioId\"\r\n            [(ngModel)]=\"userTransaction.portfolioId\"\r\n            optionLabel=\"portfolioName\"\r\n            optionValue=\"portfolioId\"\r\n            placeholder=\"Select Portfolio\"\r\n            appendTo=\"body\"\r\n          >\r\n          </p-dropdown>\r\n        </div>\r\n        <div class=\"field col\"></div>\r\n      </div>\r\n      <div class=\"formgrid grid mb-2\">\r\n        <div class=\"field col\">\r\n          <label for=\"paymentModeId\">Payment Mode</label>\r\n          <p-dropdown\r\n            [options]=\"lookupData.paymentMethods\"\r\n            name=\"paymentModeId\"\r\n            [(ngModel)]=\"userTransaction.paymentModeId\"\r\n            optionLabel=\"paymentModeName\"\r\n            optionValue=\"paymentModeId\"\r\n            placeholder=\"Payment Type\"\r\n            appendTo=\"body\"\r\n          >\r\n          </p-dropdown>\r\n        </div>\r\n        <div class=\"field col\">\r\n          <label for=\"amount\">Amount</label>\r\n          <!-- <p-inputNumber [(ngModel)]=\"userTransaction.amount\" name=\"amount\" mode=\"currency\" inputId=\"amount\"\r\n                        currency=\"USD\" currencyDisplay=\"code\" locale=\"en-US\" /> -->\r\n          <p-inputNumber\r\n            [(ngModel)]=\"userTransaction.amount\"\r\n            inputId=\"amount\"\r\n            name=\"amount\"\r\n            prefix=\"$\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"field\">\r\n        <label for=\"remarks\">Remarks</label>\r\n        <textarea\r\n          id=\"remarks\"\r\n          name=\"remarks\"\r\n          pInputTextarea\r\n          [(ngModel)]=\"userTransaction.remarks\"\r\n          rows=\"3\"\r\n          cols=\"20\"\r\n        >\r\n        </textarea>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"footer\">\r\n      <p-button\r\n        label=\"Cancel\"\r\n        icon=\"pi pi-times\"\r\n        [text]=\"true\"\r\n        (onClick)=\"hideDialog()\"\r\n      />\r\n      <p-button\r\n        label=\"Save\"\r\n        icon=\"pi pi-check\"\r\n        [disabled]=\"transactionForm.invalid\"\r\n        (onClick)=\"saveTransaction(transactionForm)\"\r\n      />\r\n    </ng-template>\r\n  </p-dialog>\r\n</form>\r\n\r\n<p-confirmDialog></p-confirmDialog>\r\n", "import { Component, OnInit } from '@angular/core';\r\nimport { LayoutService } from '../layout/service/app.layout.service';\r\nimport { User } from '../models/user.model';\r\n\r\n@Component({\r\n  templateUrl: './admin-dashboard.component.html',\r\n  styleUrls: ['./admin-dashboard.component.scss'],\r\n})\r\nexport class AdminDashboardComponent implements OnInit {\r\n  activeTabIndex = 0;\r\n  userContext: User = {} as User;\r\n\r\n  constructor(public layoutService: LayoutService) {}\r\n\r\n  ngOnInit() {\r\n    console.log('Admin Dashboard');\r\n  }\r\n\r\n  updateUserContext(user: User) {\r\n    if (user) {\r\n      this.userContext = user;\r\n      console.log(this.userContext.userId, this.userContext.firstName);\r\n      this.activeTabIndex = 3;\r\n    }\r\n  }\r\n\r\n  handleChange(e: any) {\r\n    console.log('Index is :', e.index);\r\n    this.userContext = {} as User;\r\n  }\r\n}\r\n", "<div class=\"dashboard-container\">\r\n  <p-tabView\r\n    [(activeIndex)]=\"activeTabIndex\"\r\n    (onChange)=\"handleChange($event)\"\r\n    styleClass=\"premium-tabs\"\r\n  >\r\n    <p-tabPanel header=\"Home\">\r\n      <app-admin-home *ngIf=\"activeTabIndex === 0\"></app-admin-home>\r\n    </p-tabPanel>\r\n    <p-tabPanel header=\"Users\">\r\n      <app-users\r\n        [fetchAdmins]=\"'N'\"\r\n        *ngIf=\"activeTabIndex === 1\"\r\n        (userContextFromUserTab)=\"updateUserContext($event)\"\r\n      ></app-users>\r\n    </p-tabPanel>\r\n    <p-tabPanel header=\"User Portfolios\">\r\n      <app-user-portfolios *ngIf=\"activeTabIndex === 2\"></app-user-portfolios>\r\n    </p-tabPanel>\r\n    <p-tabPanel header=\"User Transactions\">\r\n      <app-user-transactions\r\n        [userFromContext]=\"userContext\"\r\n        *ngIf=\"activeTabIndex === 3\"\r\n      ></app-user-transactions>\r\n    </p-tabPanel>\r\n    <p-tabPanel header=\"User Interests\">\r\n      <app-user-interests *ngIf=\"activeTabIndex === 4\"></app-user-interests>\r\n    </p-tabPanel>\r\n    <p-tabPanel header=\"App Admins\">\r\n      <app-users [fetchAdmins]=\"'Y'\" *ngIf=\"activeTabIndex === 5\"></app-users>\r\n    </p-tabPanel>\r\n    <!-- <p-tabPanel header=\"Configuration\">\r\n      <app-configuration *ngIf=\"activeTabIndex===6\"></app-configuration>\r\n    </p-tabPanel> -->\r\n  </p-tabView>\r\n</div>\r\n", "import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AdminDashboardComponent } from './admin-dashboard.component';\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild([\r\n        { path: '', component: AdminDashboardComponent }\r\n    ])],\r\n    exports: [RouterModule]\r\n})\r\nexport class AdminDashboardsRoutingModule { }\r\n", "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class AdminDashboardService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n\r\n}", "import { NgModule } from '@angular/core';\r\nimport { CommonModule, DatePipe } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AdminDashboardComponent } from './admin-dashboard.component';\r\n\r\nimport { AdminDashboardsRoutingModule } from './admin-dashboard-routing.module';\r\nimport { PrimeNgModule } from '../shared/prime-ng.module';\r\nimport { AdminDashboardService } from './admin-dashboard.service';\r\nimport { UsersComponent } from './users/users.component';\r\nimport { UsersService } from './users/users.service';\r\nimport { UserInterestsComponent } from './user-interests/user-interests.component';\r\nimport { UserInterestService } from './user-interests/user-interests.service';\r\nimport { UserDropdownComponent } from '../shared/user-dropdown/user-dropdown.component';\r\nimport { UserPortfolioService } from './user-portfolios/user-portfolios.service';\r\nimport { UserPortfoliosComponent } from './user-portfolios/user-portfolios.component';\r\nimport { AdminHomeComponent } from './admin-home/admin-home.component';\r\nimport { UserTransactionsService } from './user-transactions/user-transactions.service';\r\nimport { UserTransactionsComponent } from './user-transactions/user-transactions.component';\r\nimport { AdminHomeService } from './admin-home/admin-home.service';\r\nimport * as Highcharts from 'highcharts';\r\nimport { HighchartsChartModule } from 'highcharts-angular';\r\nimport { ConfigurationComponent } from './configuration/configuration.component';\r\nimport { ConfigurationService } from './configuration/configuration.service';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n// Apply a custom theme globally using `Highcharts.setOptions()`\r\nHighcharts.setOptions({\r\n    chart: {\r\n        backgroundColor: '#2a323d', // Dark background color\r\n    },\r\n    title: {\r\n        style: {\r\n            color: '#ffffff' // White color for title\r\n        }\r\n    },\r\n    tooltip: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.7)', // Dark tooltip background\r\n        style: {\r\n            color: '#fff' // Tooltip text color in white\r\n        }\r\n    },\r\n    xAxis: {\r\n        gridLineColor: '#555', // Darker grid lines\r\n        labels: {\r\n            style: {\r\n                color: '#aaa' // Lighter color for axis labels\r\n            }\r\n        }\r\n    },\r\n    yAxis: {\r\n        gridLineColor: '#555', // Darker grid lines\r\n        labels: {\r\n            style: {\r\n                color: '#aaa' // Lighter color for axis labels\r\n            }\r\n        }\r\n    },\r\n    legend: {\r\n        itemStyle: {\r\n            color: '#ffffff' // White color for legend items\r\n        }\r\n    }\r\n});\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        PrimeNgModule,\r\n        AdminDashboardsRoutingModule,\r\n        HighchartsChartModule,\r\n        SharedModule\r\n    ],\r\n    declarations: [\r\n        AdminDashboardComponent,\r\n        UsersComponent,\r\n        UserInterestsComponent,\r\n        UserDropdownComponent,\r\n        UserPortfoliosComponent,\r\n        AdminHomeComponent,\r\n        UserTransactionsComponent,\r\n        ConfigurationComponent,\r\n        // PhoneFormatPipe\r\n    ],\r\n    providers: [\r\n        AdminDashboardService,\r\n        UsersService,\r\n        UserInterestService,\r\n        UserPortfolioService,\r\n        DatePipe,\r\n        UserTransactionsService,\r\n        AdminDashboardService,\r\n        AdminHomeService,\r\n        ConfigurationService\r\n    ]\r\n})\r\nexport class AdminDashboardModule { }\r\n", "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ConfigurationService {\r\n    private apiUrl = 'https://your-api.com/api/lookup'; // Adjust your API endpoint\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getTableData(tableName: string): Observable<any[]> {\r\n        return this.http.get<any[]>(`${this.apiUrl}/${tableName}`);\r\n    }\r\n\r\n    addRecord(tableName: string, record: any): Observable<any> {\r\n        return this.http.post(`${this.apiUrl}/${tableName}`, record);\r\n    }\r\n\r\n    updateRecord(tableName: string, record: any): Observable<any> {\r\n        return this.http.put(`${this.apiUrl}/${tableName}/${record.id}`, record);\r\n    }\r\n\r\n    deleteRecord(tableName: string, id: number): Observable<any> {\r\n        return this.http.delete(`${this.apiUrl}/${tableName}/${id}`);\r\n    }\r\n}\r\n", "import { Component, OnInit } from '@angular/core';\r\nimport { ConfirmationService, MessageService } from 'primeng/api';\r\nimport { ConfigurationService } from './configuration.service';\r\n\r\n@Component({\r\n    selector: 'app-configuration',\r\n    templateUrl: './configuration.component.html',\r\n    providers: [ConfirmationService, MessageService]\r\n})\r\nexport class ConfigurationComponent implements OnInit {\r\n    tables = ['countries', 'cities', 'departments']; // Add more table names as needed\r\n    selectedTable: string = '';\r\n    records: any[] = [];\r\n    record: any = { id: null, name: '' };\r\n    showDialog = false;\r\n    isEdit = false;\r\n\r\n    constructor(\r\n        private dataService: ConfigurationService,\r\n        private confirmationService: ConfirmationService,\r\n        private messageService: MessageService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.loadTableData();\r\n    }\r\n\r\n    loadTableData() {\r\n        if (this.selectedTable) {\r\n            this.dataService.getTableData(this.selectedTable).subscribe((data) => {\r\n                this.records = data;\r\n            });\r\n        }\r\n    }\r\n\r\n    openNew() {\r\n        this.record = { id: null, name: '' };\r\n        this.showDialog = true;\r\n        this.isEdit = false;\r\n    }\r\n\r\n    editRecord(record: any) {\r\n        this.record = { ...record };\r\n        this.showDialog = true;\r\n        this.isEdit = true;\r\n    }\r\n\r\n    saveRecord() {\r\n        if (this.isEdit) {\r\n            this.dataService.updateRecord(this.selectedTable, this.record).subscribe(() => {\r\n                this.loadTableData();\r\n                this.showDialog = false;\r\n                this.messageService.add({ severity: 'success', summary: 'Updated', detail: 'Record updated successfully' });\r\n            });\r\n        } else {\r\n            this.dataService.addRecord(this.selectedTable, this.record).subscribe(() => {\r\n                this.loadTableData();\r\n                this.showDialog = false;\r\n                this.messageService.add({ severity: 'success', summary: 'Added', detail: 'Record added successfully' });\r\n            });\r\n        }\r\n    }\r\n\r\n    confirmDelete(record: any) {\r\n        this.confirmationService.confirm({\r\n            message: 'Are you sure you want to delete this record?',\r\n            accept: () => {\r\n                this.dataService.deleteRecord(this.selectedTable, record.id).subscribe(() => {\r\n                    this.loadTableData();\r\n                    this.messageService.add({ severity: 'warn', summary: 'Deleted', detail: 'Record deleted' });\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n", "<div class=\"p-grid\">\r\n    <div class=\"p-col-12 p-md-6\">\r\n        <label class=\"input-label\" for=\"userContext\">Select a Table:</label>\r\n        <p-dropdown [options]=\"tables\" [(ngModel)]=\"selectedTable\" (onChange)=\"loadTableData()\"\r\n            placeholder=\"Select a Table\">\r\n        </p-dropdown>\r\n    </div>\r\n</div>\r\n\r\n<p-table [value]=\"records\" [paginator]=\"true\" [rows]=\"5\" responsiveLayout=\"scroll\">\r\n    <ng-template pTemplate=\"header\">\r\n        <tr>\r\n            <th>ID</th>\r\n            <th>Name</th>\r\n            <th>Actions</th>\r\n        </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"body\" let-record>\r\n        <tr>\r\n            <td>{{ record.id }}</td>\r\n            <td>{{ record.name }}</td>\r\n            <td>\r\n                <button pButton icon=\"pi pi-pencil\" (click)=\"editRecord(record)\"\r\n                    class=\"p-button-sm p-button-text\"></button>\r\n                <button pButton icon=\"pi pi-trash\" (click)=\"confirmDelete(record)\"\r\n                    class=\"p-button-sm p-button-danger\"></button>\r\n            </td>\r\n        </tr>\r\n    </ng-template>\r\n</p-table>\r\n\r\n<button pButton label=\"Add New\" icon=\"pi pi-plus\" (click)=\"openNew()\"></button>\r\n\r\n<p-dialog [(visible)]=\"showDialog\" [modal]=\"true\" header=\"Manage Record\">\r\n    <div class=\"p-fluid\">\r\n        <div class=\"p-field\">\r\n            <label for=\"name\">Name</label>\r\n            <input id=\"name\" type=\"text\" pInputText [(ngModel)]=\"record.name\" />\r\n        </div>\r\n    </div>\r\n    <p-footer>\r\n        <button pButton label=\"Cancel\" icon=\"pi pi-times\" (click)=\"showDialog=false\"></button>\r\n        <button pButton label=\"Save\" icon=\"pi pi-check\" (click)=\"saveRecord()\" class=\"p-button-success\"></button>\r\n    </p-footer>\r\n</p-dialog>"],
  "mappings": "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",
  "names": ["_c0", "_c0", "_c0", "_c1", "_c0", "_c1", "Highcharts"]
}
